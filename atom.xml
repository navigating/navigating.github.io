<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[On The Open Way]]></title>
  <subtitle><![CDATA[自信人生二百年，会当水击三千里！]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://navigating.github.io//"/>
  <updated>2015-08-05T05:26:18.047Z</updated>
  <id>http://navigating.github.io//</id>
  
  <author>
    <name><![CDATA[Steven Xu]]></name>
    <email><![CDATA[xxx@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[13~14年收集的大数据的一些技术架构图]]></title>
    <link href="http://navigating.github.io/2015/13-14%E5%B9%B4%E6%94%B6%E9%9B%86%E7%9A%84%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E5%9B%BE/"/>
    <id>http://navigating.github.io/2015/13-14年收集的大数据的一些技术架构图/</id>
    <published>2015-08-05T05:16:53.000Z</published>
    <updated>2015-08-05T05:26:18.047Z</updated>
    <content type="html"><![CDATA[<p>1 Big Data Solution</p>
<p>1.1 HP</p>
<p>HP BigData 1.png<br>HP BigData 2.png</p>
<p>1.2 Oracle</p>
<p>Oracle BigData 101.png<br>Oracle BigData 1.JPG</p>
<p>1.3 IBM</p>
<p>IBM BigData 102.jpg</p>
<p>1.4 Microsoft</p>
<p>Microsoft BigData 4.png</p>
<p>1.5 Huawei</p>
<p>Huawei BigData 1.png<br>Huawei BigData 2.jpg<br>Huawei BigData 3.jpg</p>
<p>2 Big Data on Cloud</p>
<p>2.1 Amazon AWS</p>
<p>2.1.1 Netflix BigData on AWS<br>Netflix BigData 1.png</p>
<p>2.2 Microsoft Azure</p>
<p>Microsoft BigData 3.png</p>
<p>2.3 Facebook</p>
<p>Facebook BigData 101.png</p>
<p>2.4 Linkedin</p>
<p>Linkedin BigData 101.png</p>
<p>2.5 Twitter</p>
<p>Twitter BigData 101.png</p>
<p>2.6 Alibaba/Taobao</p>
<p>2.6.1 淘宝数据魔方<br>Taobao BigData 104.png</p>
<p>2.6.2 阿里大数据应用平台<br>Taobao BigData 102.png<br>Taobao BigData 101.png</p>
<p>2.6.3 阿里搜索实时流计算<br>Taobao BigData 103.png</p>
<p>2.7 Tencent</p>
<p>2.7.1 腾讯大规模Hadoop集群TDW<br>Tencent Hadoop 1.png</p>
<p>2.7.2 腾讯实时计算平台 广点通<br>Tecent Realtiming 1.png</p>
<p>2.8 JD(京东)</p>
<p>JD BigData 101.png</p>
<p>2.9 CMCC(中国移动)</p>
<p>2.9.1 大云PaaS 2.5</p>
<p>3 Hadoop Distribution</p>
<p>3.1 Apache Hadoop</p>
<p>Apache Hadoop 101.png</p>
<p>3.2 Cloudera</p>
<p>Cloudera BigData 101.png</p>
<p>3.3 Hortonworks</p>
<p>Hortonworks BigData 102.png</p>
<p>3.4 MapR</p>
<p>MapR BigData 102.png</p>
<p>3.5 Intel</p>
<p>Intel Hadoop 101.png</p>
<p>3.6 EMC Pivotal HD</p>
<p>Pivotal Hadoop 101.jpg</p>
<p>3.7 IBM</p>
<p>IBM BigData 101.jpg</p>
<p>3.8 Huawei</p>
<p>Huawei BigData 2.jpg</p>
<p>4 Landscape</p>
<p>Big-data-vendors1.jpg<br>Big-Data-Landscape-Jul-4-2012.00111.png<br>BigData Landscape 2.png</p>
<p>5 参考</p>
<ul>
<li>IBM Report<a href="http://www-01.ibm.com/software/data/bigdata/platform/resources.html" target="_blank" rel="external">IBM Report</a></li>
<li>[<a href="http://www.gartner.com/technology/reprints.do?id=1-1E7OTT7&amp;ct=130225&amp;st=sb" target="_blank" rel="external">http://www.gartner.com/technology/reprints.do?id=1-1E7OTT7&amp;ct=130225&amp;st=sb</a> Gartner - Hadoop Is Not a Data Integration Solution]</li>
<li>[<a href="http://www.gartner.com/technology/reprints.do?id=1-1DBWMQY&amp;ct=121220&amp;st=sb" target="_blank" rel="external">http://www.gartner.com/technology/reprints.do?id=1-1DBWMQY&amp;ct=121220&amp;st=sb</a> Gartner - Magic Quadrant for Data Masking Technology 2012]</li>
<li>[[媒体文件:The_Forrester_Wave_Big_Data_Predictive_Analytics_Solutions,_Q1_2013.pdf|The Forrester Wave Big Data Predictive Analytics Solutions, Q1 2013]]</li>
<li>[<a href="http://www.gartner.com/technology/reprints.do?id=1-1IMDMZ5&amp;ct=130819&amp;st=sb" target="_blank" rel="external">http://www.gartner.com/technology/reprints.do?id=1-1IMDMZ5&amp;ct=130819&amp;st=sb</a> Magic Quadrant for Cloud Infrastructure as a Service 2013]</li>
<li>[<a href="http://wenku.it168.com/d_000048434.shtml" target="_blank" rel="external">http://wenku.it168.com/d_000048434.shtml</a> Facebook Hadoop]</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>1 Big Data Solution</p>
<p>1.1 HP</p>
<p>HP BigData 1.png<br>HP BigData 2.png</p>
<p>1.2 Oracle</p>
<p>Oracle BigData 101.png<br>Oracle B]]>
    </summary>
    
      <category term="BigData" scheme="http://navigating.github.io/tags/BigData/"/>
    
      <category term="CDH" scheme="http://navigating.github.io/tags/CDH/"/>
    
      <category term="HDP" scheme="http://navigating.github.io/tags/HDP/"/>
    
      <category term="Hadoop" scheme="http://navigating.github.io/tags/Hadoop/"/>
    
      <category term="MapR" scheme="http://navigating.github.io/tags/MapR/"/>
    
      <category term="技术" scheme="http://navigating.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[读《微软研发制胜策略》]]></title>
    <link href="http://navigating.github.io/2015/%E8%AF%BB%E3%80%8A%E5%BE%AE%E8%BD%AF%E7%A0%94%E5%8F%91%E5%88%B6%E8%83%9C%E7%AD%96%E7%95%A5%E3%80%8B/"/>
    <id>http://navigating.github.io/2015/读《微软研发制胜策略》/</id>
    <published>2015-08-04T14:30:45.000Z</published>
    <updated>2015-08-04T14:31:31.555Z</updated>
    <content type="html"><![CDATA[<p>软件开发的核心就是：达成项目目标，提高生产率，提高软件的质量。除此之外，都不要重要。<br>管理上、复用上，一切的核心就是人的问题，提高人的能力是第一生产力。</p>
<p>1.项目中一个现象就是紧紧的去控制进度，调整进度，进度的跟踪只是一种日常的事务工作。<br>2.观念的改变是第一位的，什么是观念改变的原则：规则不是法律，是可以触碰的。什么是我们要改变的规则，就是要有主动、计划、灵活。<br>3.紧密的进度计划，是一般的管理人员的通常做法，他的好处就是看到不断的工作，会有不断的压力；如果运用不当，就可能让人觉得厌烦和沮丧。<br>4.为了日程进度，牺牲质量往往是不值得的，除非你要一笑而过的做法。再不管这个项目的后续开发和维护了。对于产品或者项目的期限，要谨慎，要反思可能为了进度而牺牲质量。这叫着草率的期限。<br>5.一个好的日程表会兼顾公司和员工的利益的。<br>6.没有期限的目标不过是梦想而已。<br>7.把一个大项目，切分成n个小项目来做，每一个项目的周期大约是2个月。叫着阶段式的日程控制法。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>软件开发的核心就是：达成项目目标，提高生产率，提高软件的质量。除此之外，都不要重要。<br>管理上、复用上，一切的核心就是人的问题，提高人的能力是第一生产力。</p>
<p>1.项目中一个现象就是紧紧的去控制进度，调整进度，进度的跟踪只是一种日常的事务工作。<br>2.观念]]>
    </summary>
    
      <category term="读书" scheme="http://navigating.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hadoop发行版]]></title>
    <link href="http://navigating.github.io/2015/Hadoop%E5%8F%91%E8%A1%8C%E7%89%88/"/>
    <id>http://navigating.github.io/2015/Hadoop发行版/</id>
    <published>2015-08-01T14:40:02.000Z</published>
    <updated>2015-08-04T07:08:40.853Z</updated>
    <content type="html"><![CDATA[<p>自从Hadoop的出现，引领大数据的浪潮越来越热。大数据存储的主要技术路线有几种：<br>1.Hadoop<br>2.Cassandra<br>3.MongoDB<br>Hadoop是Apache的开源项目，同时有很多商业公司对Hadoop进行版本发行和商业支持,参见：<a href="http://wiki.apache.org/hadoop/Distributions%20and%20Commercial%20Support" target="_blank" rel="external">http://wiki.apache.org/hadoop/Distributions%20and%20Commercial%20Support</a><br>其中在最有名为人所知的三家：<br>1.Cloudera<br><img src="https://raw.githubusercontent.com/stevenxu/tuku/master/navigating.github.io/2015/Hadoop_2015_1.JPG" alt="这是一张图片"></p>
<p>2.Hortonwork<br><img src="https://raw.githubusercontent.com/stevenxu/tuku/master/navigating.github.io/2015/Hadoop_2015_2.JPG" alt="这是一张图片"></p>
<p>3.MapR<br><img src="https://raw.githubusercontent.com/stevenxu/tuku/master/navigating.github.io/2015/Hadoop_2015_3.JPG" alt="这是一张图片"></p>
<p>这三个厂商之中，MapR最为封闭；Hortonworks最为开放，产品线全开源，在线文档比较丰富。国内使用Cloudera CDH和Hortonworks的应该是最多的。<br>准实时计算框架/即席查询<br>1.CDH的框架有：Impala + Spark；<br>2.HDP的框架有：Tez + Spark；<br>3.MapR的框架有：Drill + Tez + Spark。<br>关于Spark：<br>2014年大数据最热门的技术路线就是算是Spark了，而且得力于Spark不遗余力的推广和快速成长。Cloudera是最早支持Spark，也是最激进的。下图即是Spark在Cloudera产品线中的定位：<br><img src="https://raw.githubusercontent.com/stevenxu/tuku/master/navigating.github.io/2015/Hadoop_2015_4.JPG" alt="这是一张图片"></p>
<p>实际上快速计算框架的发展才刚刚开始，社区中已经有如下几种：<br>1.Spark/Shark<br>2.Hortonworks Tez/Stinger<br>3.Cloudera Impala<br>4.Apache Drill<br>5.Apache Flink<br>6.Apache Nifi<br>7.Facebook Presto</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>自从Hadoop的出现，引领大数据的浪潮越来越热。大数据存储的主要技术路线有几种：<br>1.Hadoop<br>2.Cassandra<br>3.MongoDB<br>Hadoop是Apache的开源项目，同时有很多商业公司对Hadoop进行版本发行和商业支持,参见：<a]]>
    </summary>
    
      <category term="BigData" scheme="http://navigating.github.io/tags/BigData/"/>
    
      <category term="CDH" scheme="http://navigating.github.io/tags/CDH/"/>
    
      <category term="HDP" scheme="http://navigating.github.io/tags/HDP/"/>
    
      <category term="Hadoop" scheme="http://navigating.github.io/tags/Hadoop/"/>
    
      <category term="SQL on Hadoop" scheme="http://navigating.github.io/tags/SQL-on-Hadoop/"/>
    
      <category term="技术" scheme="http://navigating.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[大数据动态之201507]]></title>
    <link href="http://navigating.github.io/2015/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8A%A8%E6%80%81%E4%B9%8B201507/"/>
    <id>http://navigating.github.io/2015/大数据动态之201507/</id>
    <published>2015-07-31T08:22:01.000Z</published>
    <updated>2015-08-01T02:27:01.570Z</updated>
    <content type="html"><![CDATA[<p>Hortonworks<br>HDP 2.3发布：<br>HDP 2.3新增加组件Apache Atlas、Apache Calcite<br><a href="http://hortonworks.com/blog/available-now-hdp-2-3/" target="_blank" rel="external">http://hortonworks.com/blog/available-now-hdp-2-3/</a><br><a href="http://hortonworks.com/blog/introducing-availability-of-hdp-2-3-part-2/" target="_blank" rel="external">http://hortonworks.com/blog/introducing-availability-of-hdp-2-3-part-2/</a><br><a href="http://hortonworks.com/blog/introducing-availability-of-hdp-2-3-part-3/" target="_blank" rel="external">http://hortonworks.com/blog/introducing-availability-of-hdp-2-3-part-3/</a><br>Spark 1.2开始支持ORC(Columnar Formats)<br><a href="http://hortonworks.com/blog/bringing-orc-support-into-apache-spark/" target="_blank" rel="external">http://hortonworks.com/blog/bringing-orc-support-into-apache-spark/</a><br>Spark in HDInsight新特性一览<br><a href="http://hortonworks.com/blog/spark-in-hdinsight/" target="_blank" rel="external">http://hortonworks.com/blog/spark-in-hdinsight/</a> </p>
<p>Cloudera<br>HBase 1.0 开始支持Thrift客户端鉴权<br><a href="http://blog.cloudera.com/blog/2015/07/thrift-client-authentication-support-in-apache-hbase-1-0/" target="_blank" rel="external">http://blog.cloudera.com/blog/2015/07/thrift-client-authentication-support-in-apache-hbase-1-0/</a><br>Pig on MR优化<br><a href="http://blog.cloudera.com/blog/2015/07/how-to-tune-mapreduce-parallelism-in-apache-pig-jobs/" target="_blank" rel="external">http://blog.cloudera.com/blog/2015/07/how-to-tune-mapreduce-parallelism-in-apache-pig-jobs/</a><br>Apache Zeppelin on CDH<br><a href="http://blog.cloudera.com/blog/2015/07/how-to-install-apache-zeppelin-on-cdh/" target="_blank" rel="external">http://blog.cloudera.com/blog/2015/07/how-to-install-apache-zeppelin-on-cdh/</a><br>大数据欺诈检测架构<br><a href="http://blog.cloudera.com/blog/2015/07/designing-fraud-detection-architecture-that-works-like-your-brain-does/" target="_blank" rel="external">http://blog.cloudera.com/blog/2015/07/designing-fraud-detection-architecture-that-works-like-your-brain-does/</a> </p>
<p>MapR<br>YARN资源管理实践<br><a href="https://www.mapr.com/blog/best-practices-yarn-resource-management" target="_blank" rel="external">https://www.mapr.com/blog/best-practices-yarn-resource-management</a><br>Hive 1.0对Transaction的支持<br><a href="https://www.mapr.com/blog/hive-transaction-feature-hive-10" target="_blank" rel="external">https://www.mapr.com/blog/hive-transaction-feature-hive-10</a> </p>
<p>Databricks<br>Spark Streaming执行模型<br><a href="https://databricks.com/blog/2015/07/30/diving-into-spark-streamings-execution-model.html" target="_blank" rel="external">https://databricks.com/blog/2015/07/30/diving-into-spark-streamings-execution-model.html</a><br>Spark 1.4 MLP新特性<br><a href="https://databricks.com/blog/2015/07/29/new-features-in-machine-learning-pipelines-in-spark-1-4.html" target="_blank" rel="external">https://databricks.com/blog/2015/07/29/new-features-in-machine-learning-pipelines-in-spark-1-4.html</a><br>从Spark 1.2开始支持ORC<br><a href="https://databricks.com/blog/2015/07/16/joint-blog-post-bringing-orc-support-into-apache-spark.html" target="_blank" rel="external">https://databricks.com/blog/2015/07/16/joint-blog-post-bringing-orc-support-into-apache-spark.html</a><br>从Spark 1.4开始支持窗口函数<br><a href="https://databricks.com/blog/2015/07/15/introducing-window-functions-in-spark-sql.html" target="_blank" rel="external">https://databricks.com/blog/2015/07/15/introducing-window-functions-in-spark-sql.html</a><br>从Spark 1.4开始新的Web UI<br><a href="https://databricks.com/blog/2015/07/08/new-visualizations-for-understanding-spark-streaming-applications.html" target="_blank" rel="external">https://databricks.com/blog/2015/07/08/new-visualizations-for-understanding-spark-streaming-applications.html</a> </p>
<p>Phoenix对join的支持，TPC in Apache Phoenix<br><a href="https://blogs.apache.org/phoenix/entry/tpc_in_apache_phoenix" target="_blank" rel="external">https://blogs.apache.org/phoenix/entry/tpc_in_apache_phoenix</a> </p>
<p>Cassandra<br><a href="http://cassandra.apache.org/" target="_blank" rel="external">http://cassandra.apache.org/</a> </p>
<p>mongoDB<br><a href="https://www.mongodb.org/" target="_blank" rel="external">https://www.mongodb.org/</a> </p>
<p>Confluent<br>基于Kafka的实时流处理<br><a href="http://www.confluent.io/" target="_blank" rel="external">http://www.confluent.io/</a><br>大数据生态系统之Kafka价值<br><a href="http://www.confluent.io/blog/the-value-of-apache-kafka-in-big-data-ecosystem/" target="_blank" rel="external">http://www.confluent.io/blog/the-value-of-apache-kafka-in-big-data-ecosystem/</a> </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hortonworks<br>HDP 2.3发布：<br>HDP 2.3新增加组件Apache Atlas、Apache Calcite<br><a href="http://hortonworks.com/blog/available-now-hdp-2-3/" targ]]>
    </summary>
    
      <category term="BigData" scheme="http://navigating.github.io/tags/BigData/"/>
    
      <category term="Cassandra" scheme="http://navigating.github.io/tags/Cassandra/"/>
    
      <category term="Hadoop" scheme="http://navigating.github.io/tags/Hadoop/"/>
    
      <category term="Spark" scheme="http://navigating.github.io/tags/Spark/"/>
    
      <category term="mongoDB" scheme="http://navigating.github.io/tags/mongoDB/"/>
    
      <category term="技术" scheme="http://navigating.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Hexo搭建Github静态博客]]></title>
    <link href="http://navigating.github.io/2015/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BAGithub%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <id>http://navigating.github.io/2015/使用Hexo搭建Github静态博客/</id>
    <published>2015-07-28T09:20:22.000Z</published>
    <updated>2015-08-01T05:37:12.996Z</updated>
    <content type="html"><![CDATA[<p>环境：</p>
<pre><code><span class="bullet">1. </span>Windows XP
<span class="bullet">2. </span>Git
</code></pre><p>步骤：</p>
<pre><code><span class="bullet">1. </span>安装Node.js
<span class="bullet">2. </span>安装Hexo
<span class="bullet">3. </span>创建博客(初始化Hexo)
<span class="bullet">4. </span>创建文章本地调试
<span class="bullet">5. </span>配置Github
<span class="bullet">6. </span>远程发布
<span class="bullet">7. </span>支持sitemap和feed
<span class="bullet">8. </span>支持百度统计
<span class="bullet">9. </span>支持图片
<span class="bullet">10. </span>支持Swiftype站内搜索
<span class="bullet">11. </span>参考资源
</code></pre><h2 id="安装Node-js">安装Node.js</h2><p>下载并安装，<a href="https://nodejs.org/" target="_blank" rel="external">https://nodejs.org/</a></p>
<h2 id="安装Hexo">安装Hexo</h2><p>通过命令 npm install -g hexo 安装</p>
<pre><code><span class="attribute">D</span>:\git\hexo&gt;npm install -g hexo

npm WARN optional dep failed, continuing fsevents<span class="variable">@0</span>.<span class="number">3.6</span>
npm WARN optional dep failed, continuing fsevents<span class="variable">@0</span>.<span class="number">3.6</span>
-


&gt; dtrace-provider<span class="variable">@0</span>.<span class="number">5.0</span> install <span class="attribute">C</span>:\Users\stevenxu\AppData\Roaming\npm\node_modules\hexo\node_modules\bunyan\node_modules\dtrace-provider
&gt; node scripts/install.js

<span class="attribute">C</span>:\Users\stevenxu\AppData\Roaming\npm\hexo -&gt; <span class="attribute">C</span>:\Users\stevenxu\AppData\Roaming\npm\node_modules\hexo\bin\hexo
hexo<span class="variable">@3</span>.<span class="number">1.1</span> <span class="attribute">C</span>:\Users\stevenxu\AppData\Roaming\npm\node_modules\hexo
├── pretty-hrtime<span class="variable">@1</span>.<span class="number">0.0</span>
├── hexo-front-matter<span class="variable">@0</span>.<span class="number">2.2</span>
├── abbrev<span class="variable">@1</span>.<span class="number">0.7</span>
├── titlecase<span class="variable">@1</span>.<span class="number">0.2</span>
├── archy<span class="variable">@1</span>.<span class="number">0.0</span>
├── text-table<span class="variable">@0</span>.<span class="number">2.0</span>
├── tildify<span class="variable">@1</span>.<span class="number">1.0</span> (os-homedir<span class="variable">@1</span>.<span class="number">0.1</span>)
├── strip-indent<span class="variable">@1</span>.<span class="number">0.1</span> (get-stdin<span class="variable">@4</span>.<span class="number">0.1</span>)
├── hexo-i18n<span class="variable">@0</span>.<span class="number">2.1</span> (sprintf-js<span class="variable">@1</span>.<span class="number">0.3</span>)
├── chalk<span class="variable">@1</span>.<span class="number">1.0</span> (escape-string-regexp<span class="variable">@1</span>.<span class="number">0.3</span>, supports-color<span class="variable">@2</span>.<span class="number">0.0</span>, ansi-styles<span class="variable">@2</span>.<span class="number">1.0</span>, strip-ansi<span class="variable">@3</span>.<span class="number">0.0</span>, has-ansi<span class="variable">@2</span>.<span class="number">0.0</span>)
├── bluebird<span class="variable">@2</span>.<span class="number">9.34</span>
├── minimatch<span class="variable">@2</span>.<span class="number">0.10</span> (brace-expansion<span class="variable">@1</span>.<span class="number">1.0</span>)
├── through2<span class="variable">@1</span>.<span class="number">1.1</span> (xtend<span class="variable">@4</span>.<span class="number">0.0</span>, readable-stream<span class="variable">@1</span>.<span class="number">1.13</span>)
├── swig-extras<span class="variable">@0</span>.<span class="number">0.1</span> (markdown<span class="variable">@0</span>.<span class="number">5.0</span>)
├── hexo-fs<span class="variable">@0</span>.<span class="number">1.3</span> (escape-string-regexp<span class="variable">@1</span>.<span class="number">0.3</span>, graceful-fs<span class="variable">@3</span>.<span class="number">0.8</span>, chokidar<span class="variable">@0</span>.<span class="number">12.6</span>)
├── js-yaml<span class="variable">@3</span>.<span class="number">3.1</span> (esprima<span class="variable">@2</span>.<span class="number">2.0</span>, argparse<span class="variable">@1</span>.<span class="number">0.2</span>)
├── nunjucks<span class="variable">@1</span>.<span class="number">3.4</span> (optimist<span class="variable">@0</span>.<span class="number">6.1</span>, chokidar<span class="variable">@0</span>.<span class="number">12.6</span>)
├── warehouse<span class="variable">@1</span>.<span class="number">0.2</span> (graceful-fs<span class="variable">@3</span>.<span class="number">0.8</span>, cuid<span class="variable">@1</span>.<span class="number">2.5</span>, JSONStream<span class="variable">@0</span>.<span class="number">10.0</span>)
├── cheerio<span class="variable">@0</span>.<span class="number">19.0</span> (entities<span class="variable">@1</span>.<span class="number">1.1</span>, dom-serializer<span class="variable">@0</span>.<span class="number">1.0</span>, css-select<span class="variable">@1</span>.<span class="number">0.0</span>, htmlparser2<span class="variable">@3</span>.<span class="number">8.3</span>)
├── bunyan<span class="variable">@1</span>.<span class="number">4.0</span> (safe-json-stringify<span class="variable">@1</span>.<span class="number">0.3</span>, dtrace-provider<span class="variable">@0</span>.<span class="number">5.0</span>, mv<span class="variable">@2</span>.<span class="number">1.1</span>)

├── hexo-cli<span class="variable">@0</span>.<span class="number">1.7</span> (minimist<span class="variable">@1</span>.<span class="number">1.2</span>)
├── moment-timezone<span class="variable">@0</span>.<span class="number">3.1</span>
├── moment<span class="variable">@2</span>.<span class="number">10.3</span>
├── hexo-util<span class="variable">@0</span>.<span class="number">1.7</span> (ent<span class="variable">@2</span>.<span class="number">2.0</span>, highlight.js<span class="variable">@8</span>.<span class="number">6.0</span>)
├── swig<span class="variable">@1</span>.<span class="number">4.2</span> (optimist<span class="variable">@0</span>.<span class="number">6.1</span>, uglify-js<span class="variable">@2</span>.<span class="number">4.24</span>)
└── lodash<span class="variable">@3</span>.<span class="number">10.0</span>

<span class="attribute">D</span>:\git\hexo&gt;
</code></pre><h2 id="创建博客(初始化hexo)">创建博客(初始化hexo)</h2><p>创建博客站点的本地目录，然后在文件夹下执行命令：</p>
<pre><code><span class="variable">$ </span>hexo init
</code></pre><p>[info] Copying data<br>[info] You are almost done! Don’t forget to run <code>npm install</code> before you start b<br>logging with Hexo!</p>
<p>Hexo会自动在目标文件夹下建立网站所需要的文件。然后按照提示，安装node_modules，执行如下命令：</p>
<pre><code>$ hexo <span class="keyword">install</span>
</code></pre><h2 id="创建文章本地调试">创建文章本地调试</h2><p>预览本地调试模式，执行如下命令：</p>
<pre><code>$ hexo <span class="keyword">server</span>
</code></pre><p>[info] Hexo is running at <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>. Press Ctrl+C to stop.</p>
<p>关键命令简介：</p>
<pre><code><span class="title">hexo</span> n     <span class="comment">#创建新的文章</span>
hexo g     <span class="comment">#重新生成站点</span>
hexo s     <span class="comment">#启动本地服务</span>
hexo d     <span class="comment">#发布到github</span>
</code></pre><p>创建文章</p>
<pre><code>$ hexo <span class="keyword">new</span> <span class="string">"使用Hexo搭建Github静态博客"</span> 
</code></pre><p>在Hexo工作文件夹下source_posts发现新创建的md文件 使用Hexo搭建Github静态博客.md 。</p>
<h2 id="配置Github">配置Github</h2><p>部署到Github需要修改配置文件_config.yml文件，在Hexo工作目录之下：</p>
<pre><code># Deployment
## <span class="string">Docs:</span> <span class="string">http:</span><span class="comment">//hexo.io/docs/deployment.html</span>
<span class="label">
deploy:</span>
<span class="label">    type:</span> git
<span class="label">    repository:</span> git<span class="annotation">@github</span>.<span class="string">com:</span>&lt;Your Github Username&gt;/&lt;Your github.io url&gt;
<span class="label">    branch:</span> master
</code></pre><p>注意，当前type为git，而不是github</p>
<p>测试Github是否好用    </p>
<pre><code><span class="title">ssh</span> -T git<span class="variable">@github</span>.com
</code></pre><h2 id="远程发布">远程发布</h2><p>远程部署到Github，通过执行如下命令：    </p>
<pre><code><span class="variable">$ </span>hexi deploy
</code></pre><p>Troubleshooting<br>出现错误：Error: spawn git ENOENT<br>解决方案：<br><a href="http://blog.csdn.net/rainloving/article/details/46595559" target="_blank" rel="external">http://blog.csdn.net/rainloving/article/details/46595559</a> </p>
<p>使用github出现：fatal: unable to access: Failed connect to github.com:8080: No error<br>解决方案：<br><a href="http://www.zhihu.com/question/26954892" target="_blank" rel="external">http://www.zhihu.com/question/26954892</a> </p>
<p>使用github出现：ssh:connect to host github.com port 22: Bad file number<br>解决方案：<br><a href="http://www.xnbing.org/?p=759" target="_blank" rel="external">http://www.xnbing.org/?p=759</a><br><a href="http://blog.csdn.net/temotemo/article/details/7641883" target="_blank" rel="external">http://blog.csdn.net/temotemo/article/details/7641883</a> </p>
<h2 id="支持sitemap和feed">支持sitemap和feed</h2><p>首先安装sitemap和feed插件</p>
<pre><code>$ npm <span class="keyword">install</span> hexo-generator-sitemap
$ npm <span class="keyword">install</span> hexo-generator-feed
</code></pre><p>修改配置，在文件 _config.yml 增加以下内容</p>
<pre><code><span class="preprocessor"># Extensions</span>
<span class="label">Plugins:</span>
- hexo-generator-feed
- hexo-generator-sitemap

<span class="preprocessor">#Feed Atom</span>
<span class="label">feed:</span>
    type: atom
    path: atom.xml
    limit: <span class="number">20</span>

<span class="preprocessor">#sitemap</span>
<span class="label">sitemap:</span>
    path: sitemap.xml
</code></pre><p>在 themes\landscape_config.yml 中添加：</p>
<pre><code><span class="attribute">menu</span>:
    <span class="attribute">Home</span>: /
    <span class="attribute">Archives</span>: /archives
    <span class="attribute">Sitemap</span>: /sitemap.xml
<span class="attribute">rss</span>: /atom.xml
</code></pre><h2 id="支持百度统计">支持百度统计</h2><p>在 <a href="http://tongji.baidu.com" target="_blank" rel="external">http://tongji.baidu.com</a> 注册帐号，添加网站，生成统计功能的 JS 代码。</p>
<p>在 themes\landscape_config.yml 中新添加一行：</p>
<pre><code><span class="keyword">baidu_t</span>ongji: <span class="keyword">true</span>
</code></pre><p>在 themes\landscape\layout_partial\head.ejs 中head的结束标签  之前新添加一行代码</p>
<pre><code>&lt;<span class="preprocessor">%</span>- partial<span class="comment">('baidu_tongji')</span> <span class="preprocessor">%</span>&gt;
</code></pre><p>在 themes\landscape\layout_partial 中新创建一个文件 baidu_tongji.ejs 并添加如下内容：</p>
<pre><code><span class="xml"></span>&lt;%<span class="ruby"> <span class="keyword">if</span> (theme.baidu_tongji){ </span>%&gt;<span class="xml">
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="apache">
    <span class="tag">&lt;百度统计的 JS 代码&gt;</span>
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</span>&lt;%<span class="ruby"> } </span>%&gt;<span class="xml"></span>
</code></pre><p>添加统计，参考：<br><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">http://ibruce.info/2013/11/22/hexo-your-blog/</a><br><a href="http://www.cnblogs.com/zhcncn/p/4097881.html" target="_blank" rel="external">http://www.cnblogs.com/zhcncn/p/4097881.html</a> </p>
<h2 id="支持图片">支持图片</h2><p>在source目录下创建images目录，然后将图片放在其中。<br>在文章中引用本地图片的语法例如：</p>
<pre><code>![<span class="link_label">这是一张图片</span>](<span class="link_url">/images/2005_TuoZhanXunLian.jpg</span>)
</code></pre><h2 id="支持swiftype站内搜索">支持swiftype站内搜索</h2><p>在 <a href="http://siftype.com" target="_blank" rel="external">http://siftype.com</a> 注册一个帐号，按着网站引导流程就可以了。<br>安装 install code 代码到hexo，添加到 themes\landscape\layout_partial\after-footer.ejs，类似添加百度统计的代码。<br>然后回到swiftype网站对 install code 进行确认。通过会在下方弹出一条消息：</p>
<pre><code><span class="title">Installation</span> successfully activated
</code></pre><h2 id="添加robots-txt">添加robots.txt</h2><p><a href="http://blog.lmintlcx.com/post/blog-with-hexo.html" target="_blank" rel="external">http://blog.lmintlcx.com/post/blog-with-hexo.html</a> </p>
<h2 id="参考资源">参考资源</h2><p><a href="http://blog.lmintlcx.com/post/blog-with-hexo.html" target="_blank" rel="external">http://blog.lmintlcx.com/post/blog-with-hexo.html</a><br><a href="https://github.com/bruce-sha" target="_blank" rel="external">https://github.com/bruce-sha</a><br><a href="http://zipperary.com/2013/05/28/hexo-guide-2/" target="_blank" rel="external">http://zipperary.com/2013/05/28/hexo-guide-2/</a><br><a href="http://zipperary.com/2013/05/29/hexo-guide-3/" target="_blank" rel="external">http://zipperary.com/2013/05/29/hexo-guide-3/</a><br><a href="http://zipperary.com/2013/05/30/hexo-guide-4/" target="_blank" rel="external">http://zipperary.com/2013/05/30/hexo-guide-4/</a><br><a href="http://cnfeat.com/2014/05/10/2014-05-11-how-to-build-a-blog/" target="_blank" rel="external">http://cnfeat.com/2014/05/10/2014-05-11-how-to-build-a-blog/</a><br><a href="http://www.cnblogs.com/zhcncn/p/4097881.html" target="_blank" rel="external">http://www.cnblogs.com/zhcncn/p/4097881.html</a><br><a href="http://blog.moyizhou.cn/web/search-engine-for-static-pages/" target="_blank" rel="external">http://blog.moyizhou.cn/web/search-engine-for-static-pages/</a><br><a href="http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype.html" target="_blank" rel="external">http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>环境：</p>
<pre><code><span class="bullet">1. </span>Windows XP
<span class="bullet">2. </span>Git
</code></pre><p>步骤：</p>
<pre><code><span ]]>
    </summary>
    
      <category term="blog" scheme="http://navigating.github.io/tags/blog/"/>
    
      <category term="github" scheme="http://navigating.github.io/tags/github/"/>
    
      <category term="hexo" scheme="http://navigating.github.io/tags/hexo/"/>
    
      <category term="技术" scheme="http://navigating.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://navigating.github.io/2015/hello-world/"/>
    <id>http://navigating.github.io/2015/hello-world/</id>
    <published>2015-07-27T09:20:22.000Z</published>
    <updated>2015-07-28T09:21:58.301Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
      <category term="hexo" scheme="http://navigating.github.io/tags/hexo/"/>
    
      <category term="技术" scheme="http://navigating.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hadoop 2.7.1 发布]]></title>
    <link href="http://navigating.github.io/2015/Hadoop-2-7-1-%E5%8F%91%E5%B8%83/"/>
    <id>http://navigating.github.io/2015/Hadoop-2-7-1-发布/</id>
    <published>2015-07-09T13:49:30.000Z</published>
    <updated>2015-07-30T13:50:50.764Z</updated>
    <content type="html"><![CDATA[<p>2015年7月6日，Apache Hadoop的稳定版本 2.7.1 正式发布。<br><a href="http://hadoop.apache.org/releases.html#Release+Notes" target="_blank" rel="external">http://hadoop.apache.org/releases.html#Release+Notes</a> </p>
<p>Hadoop 2.7的一个小版本发布了，本版本属于稳定版本。<br>修复了2.7.0中存在的131个bug。<br>这是2.7.x第一个稳定版本，增强的功能列表请通过2.7.0版本部分查看。<br>按着计划，下一个2.7.x的小版本是2.7.2.</p>
<p>原文：<br>06 July, 2015: Release 2.7.1 (stable) availableA point release for the 2.7 line. This release is now considered stable.<br>Please see the Hadoop 2.7.1 Release Notes for the list of 131 bug fixes and patches since the previous release 2.7.0. Please look at the 2.7.0 section below for the list of enhancements enabled by this first stable release of 2.7.x.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2015年7月6日，Apache Hadoop的稳定版本 2.7.1 正式发布。<br><a href="http://hadoop.apache.org/releases.html#Release+Notes" target="_blank" rel="external"]]>
    </summary>
    
      <category term="Hadoop" scheme="http://navigating.github.io/tags/Hadoop/"/>
    
      <category term="技术" scheme="http://navigating.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[读《Deploying Apache Kafka: A Practical FAQ》]]></title>
    <link href="http://navigating.github.io/2015/%E8%AF%BB%E3%80%8ADeploying-Apache-Kafka-A-Practical-FAQ%E3%80%8B/"/>
    <id>http://navigating.github.io/2015/读《Deploying-Apache-Kafka-A-Practical-FAQ》/</id>
    <published>2015-07-02T14:57:45.000Z</published>
    <updated>2015-07-30T15:01:55.553Z</updated>
    <content type="html"><![CDATA[<p>Cloudera发布了Kafka的好文，《Deploying Apache Kafka: A Practical FAQ》，参见：<a href="http://blog.cloudera.com/blog/2015/07/deploying-apache-kafka-a-practical-faq" target="_blank" rel="external">http://blog.cloudera.com/blog/2015/07/deploying-apache-kafka-a-practical-faq</a></p>
<p>是否应当为Kafka Broker使用 固态硬盘 (SSD)<br>实际上使用SSD盘并不能显著地改善 Kafka 的性能，主要有两个原因：</p>
<pre><code>* Kafka写磁盘是异步的，不是同步的。就是说，除了启动、停止之外，Kafka的任何操作都不会去等待磁盘同步（sync）完成；而磁盘同步(disk syncs)总是在后台完成的。这就是为什么Kafka消息至少复制到三个副本是至关重要的，因为一旦单个副本崩溃，这个副本就会丢失数据无法同步写到磁盘。
* 每一个Kafka <span class="keyword">Partition</span>被存储为一个串行的WAL（<span class="keyword">Write</span> Ahead <span class="keyword">Log</span>）日志文件。因此，除了极少数的数据查询，Kafka中的磁盘读写都是串行的。现代的操作系统已经对串行读写做了大量的优化工作。
</code></pre><p>如何对Kafka Broker上持久化的数据进行加密<br>目前，Kafka不提供任何机制对Broker上持久化的数据进行加密。用户可以自己对写入到Kafka的数据进行加密，即是，生产者(Producers)在写Kafka之前加密数据，消费者(Consumers)能解密收到的消息。这就要求生产者(Producers)把加密协议(protocols)和密钥(keys)分享给消费者(Consumers)。<br>另外一种选择，就是使用软件提供的文件系统级别的加密，例如Cloudera Navigator Encrypt。Cloudera Navigator Encrypt是Cloudera企业版(Cloudera Enterprise)的一部分，在应用程序和文件系统之间提供了一个透明的加密层。<br>Apache Zookeeper正成为Kafka集群的一个痛点(pain point)，真的吗？<br>Kafka高级消费者(high-level consumer)的早期版本(0.8.1或更早)使用Zookeeper来维护读的偏移量(offsets，主要是Topic的每个Partition的读偏移量)。如果有大量生产者(consumers)同时从Kafka中读数据，对Kafka的读写负载可能就会超出它的容量，Zookeeper就变成一个瓶颈(bottleneck)。当然，这仅仅出现在一些很极端的案例中(extreme cases)，即有成百上千个消费者(consumers)在使用同一个Zookeeper集群来管理偏移量(offset)。<br>不过，这个问题已经在Kafka当前的版本(0.8.2)中解决。从版本0.8.2开始，高级消费者(high-level consumer)能够使用Kafka自己来管理偏移量(offsets)。本质上讲，它使用一个单独的Kafka Topic来管理最近的读偏移量(read offsets)，因此偏移量管理(offset management)不再要求Zookeeper必须存在。然后，用户将不得不面临选择是用Kafka还是Zookeeper来管理偏移量(offsets)，由消费者(consumer)配置参数 offsets.storage 决定。<br>Cloudera强烈推荐使用Kafka来存储偏移量。当然，为了保证向后兼容性，你可以继续选择使用Zookeeper存储偏移量。(例如，你可能有一个监控平台需要从Zookeeper中读取偏移量信息。) 假如你不得不使用Zookeeper进行偏移量(offset)管理，我们推荐你为Kafka集群使用一个专用的Zookeeper集群。假如一个专用的Zookeeper集群仍然有性能瓶颈，你依然可以通过在Zookeeper节点上使用固态硬盘(SSD)来解决问题。<br>Kafka是否支持跨数据中心的可用性<br>Kafka跨数据中心可用性的推荐解决方案是使用MirrorMaker(<a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=27846330" target="_blank" rel="external">https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=27846330</a> ) 。在你的每一个数据中心都搭建一个Kafka集群，在Kafka集群之间使用MirrorMaker来完成近实时的数据复制。<br>使用MirrorMaker的架构模式是为每一个”逻辑”的topic在每一个数据中心创建一个topic：例如，在逻辑上你有一个”clicks”的topic，那么你实际上有”DC1.clicks”和“DC2.clicks”两个topic(DC1和DC2指得是你的数据中心)。DC1向DC1.clicks中写数据，DC2向DC2.clicks中写数据。MirrorMaker将复制所有的DC1 topics到DC2，并且复制所有的DC2 topics到DC1。现在每个DC上的应用程序都能够访问写入到两个DC的事件。这个应用程序能够合并信息和处理相应的冲突。<br>另一种更复杂的模式是在每一个DC都搭建本地和聚合Kafka集群。这个模式已经被Linkedin使用，Linkedin Kafka运维团队已经在这篇Blog(<a href="https://engineering.linkedin.com/kafka/running-kafka-scale" target="_blank" rel="external">https://engineering.linkedin.com/kafka/running-kafka-scale</a> )中有详细的描述(参见“Tiers and Aggregation”)。<br>Kafka支持哪些类型的数据转换(data transformation)<br>数据流过的Kafka的时候，Kafka并不能进行数据转换。为了处理数据转换，我们推荐如下方法：</p>
<pre><code>* 对于简单事件处理，使用<span class="constant">Flume Kafka </span>integration(<span class="symbol">http:</span>/<span class="regexp">/blog.cloudera.com/blog</span><span class="regexp">/2014/</span><span class="number">11</span>/flafka-apache-flume-meets-apache-kafka-<span class="keyword">for</span>-event-processing )，并且写一个简单的<span class="constant">Apache Flume Interceptor。</span>
* 对于复杂(事件)处理，使用<span class="constant">Apache Spark Streaming从Kafka中</span>读数据和处理数据。
</code></pre><p>在这两种情况下，被转换或者处理的数据可被写会到新的Kafka Topic中，或者直接传送到数据的最终消费者(Consumer)那里。<br>对于实时事件处理模式更全面的描述，看看这篇文章(<a href="http://blog.cloudera.com/blog/2015/06/architectural-patterns-for-near-real-time-data-processing-with-apache-hadoop/" target="_blank" rel="external">http://blog.cloudera.com/blog/2015/06/architectural-patterns-for-near-real-time-data-processing-with-apache-hadoop/</a> )。<br>如何通过Kafka发送大消息或者超大负荷量？<br>Cloudera的性能测试表明Kafka达到最大吞吐量的消息大小为10K左右。更大的消息将导致吞吐量下降。然后，在一些情况下，用户需要发送比10K大的多的消息。<br>如果消息负荷大小是每100s处理MB级别，我们推荐探索以下选择：</p>
<pre><code><span class="bullet">* </span>如果可以使用共享存储(HDFS、S3、NAS)，那么将超负载放在共享存储上，仅用Kafka发送负载数据位置的消息。
<span class="bullet">* </span>对于大消息，在写入Kafka之前将消息拆分成更小的部分，使用消息Key确保所有的拆分部分都写入到同一个partition中，以便于它们能被同一个消息着(Consumer)消费的到，在消费的时候将拆分部分重新组装成一个大消息。
</code></pre><p>在通过Kafka发送大消息时，请记住以下几点：<br>压缩配置</p>
<pre><code><span class="keyword">*</span> Kafka生产者(Producers)能够压缩消息。通过配置参数compression.codec确保压缩已经开启。有效的选项为<span class="string">"gzip"</span>和<span class="string">"snappy"</span>。
</code></pre><p>Broker配置</p>
<pre><code>* message.<span class="built_in">max</span>.<span class="keyword">bytes</span> (default: <span class="number">1000000</span>): Broker能够接受的最大消息。增加这个值以便于匹配你的最大消息。
* <span class="built_in">log</span>.<span class="keyword">segment</span>.<span class="keyword">bytes</span> (default: <span class="number">1</span>GB): Kafka数据文件的大小。确保它至少大于一条消息。默认情况下已经够用，一般最大的消息不会超过<span class="number">1</span>G大小。
* replica.fetch.<span class="built_in">max</span>.<span class="keyword">bytes</span> (default: <span class="number">1</span>MB): Broker间复制的最大的数据大小。这个值必须大于message.<span class="built_in">max</span>.<span class="keyword">bytes</span>，否则一个Broker接受到消息但是会复制失败，从而导致潜在的数据丢失。
</code></pre><p>Consumer配置</p>
<pre><code>* <span class="tag">fetch</span><span class="class">.message</span><span class="class">.max</span><span class="class">.bytes</span> (<span class="rule"><span class="attribute">default</span>:<span class="value"> <span class="number">1</span>MB): Consumer所读消息的最大大小。这个值应该大于或者等于Broker配置的message.max.bytes的值。</span></span>
</code></pre><p>其他方面的考虑：</p>
<pre><code>* <span class="tag">Broker</span>需要针对复制为每一个<span class="tag">partition</span>分配一个<span class="tag">replica</span><span class="class">.fetch</span><span class="class">.max</span><span class="class">.bytes</span>大小的缓存区。需要计算确认( <span class="tag">partition</span>的数量 * 最大消息的大小 )不会超过可用的内存，否则就会引发<span class="tag">OOMs</span>（内存溢出异常）。
* <span class="tag">Consumers</span>有同样的问题，因子参数为 <span class="tag">fetch</span><span class="class">.message</span><span class="class">.max</span><span class="class">.bytes</span> ：确认每一个<span class="tag">partition</span>的消费者针对最大的消息有足够可用的内存。
* 大消息可能引发更长时间的垃圾回收停顿(<span class="tag">garbage</span> <span class="tag">collection</span> <span class="tag">pauses</span>)(<span class="tag">brokers</span>需要申请更大块的内存)。注意观察<span class="tag">GC</span>日志和服务器日志。假如发现长时间的<span class="tag">GC</span>停顿导致<span class="tag">Kafka</span>丢失了<span class="tag">Zookeeper</span> <span class="tag">session</span>，你可能需要为<span class="tag">zookeeper</span><span class="class">.session</span><span class="class">.timeout</span><span class="class">.ms</span>配置更长的<span class="tag">timeout</span>值。
</code></pre><p>Kafka是否支持MQTT或JMS协议<br>目前，Kafka针对上述协议不提供直接支持。但是，用户可以自己编写Adaptors从MQTT或者JMS中读取数据，然后写入到Kafka中。</p>
<p>更多关于在CDH中使用Kafka的信息，下载Deployment Guide(<a href="http://www.cloudera.com/content/cloudera/en/resources/library/datasheet/kafka-reference-architecture.html" target="_blank" rel="external">http://www.cloudera.com/content/cloudera/en/resources/library/datasheet/kafka-reference-architecture.html</a> ) 或者 观看webinar “Bringing Real-Time Data to Hadoop”(<a href="http://www.cloudera.com/content/cloudera/en/resources/library/recordedwebinar/kafka-webinar-recording.html" target="_blank" rel="external">http://www.cloudera.com/content/cloudera/en/resources/library/recordedwebinar/kafka-webinar-recording.html</a> )。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Cloudera发布了Kafka的好文，《Deploying Apache Kafka: A Practical FAQ》，参见：<a href="http://blog.cloudera.com/blog/2015/07/deploying-apache-kafka-a-]]>
    </summary>
    
      <category term="CDH" scheme="http://navigating.github.io/tags/CDH/"/>
    
      <category term="Kafka" scheme="http://navigating.github.io/tags/Kafka/"/>
    
      <category term="技术" scheme="http://navigating.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[大数据动态之201506]]></title>
    <link href="http://navigating.github.io/2015/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8A%A8%E6%80%81%E4%B9%8B201506/"/>
    <id>http://navigating.github.io/2015/大数据动态之201506/</id>
    <published>2015-06-09T13:52:23.000Z</published>
    <updated>2015-08-01T02:16:57.704Z</updated>
    <content type="html"><![CDATA[<p>Pinot：LinkedIn的实时数据分析系统<br><a href="http://www.infoq.com/cn/news/2014/10/linkdln" target="_blank" rel="external">http://www.infoq.com/cn/news/2014/10/linkdln</a><br><a href="https://engineering.linkedin.com/analytics/real-time-analytics-massive-scale-pinot" target="_blank" rel="external">https://engineering.linkedin.com/analytics/real-time-analytics-massive-scale-pinot</a></p>
<p>Twitter Heron：Twitter发布新的大数据实时分析系统Heron<br><a href="http://geek.csdn.net/news/detail/33750" target="_blank" rel="external">http://geek.csdn.net/news/detail/33750</a><br><a href="http://www.longda.us/?p=529" target="_blank" rel="external">http://www.longda.us/?p=529</a> </p>
<p>Cloudera<br>HBase对MOBs( Moderate Objects, 主要是大小100K到10M的对象存储 )的支持<br><a href="http://blog.cloudera.com/blog/2015/06/inside-apache-hbases-new-support-for-mobs/" target="_blank" rel="external">http://blog.cloudera.com/blog/2015/06/inside-apache-hbases-new-support-for-mobs/</a><br>准实时计算架构模式<br><a href="http://blog.cloudera.com/blog/2015/06/architectural-patterns-for-near-real-time-data-processing-with-apache-hadoop/" target="_blank" rel="external">http://blog.cloudera.com/blog/2015/06/architectural-patterns-for-near-real-time-data-processing-with-apache-hadoop/</a><br>(翻译：<a href="http://zhuanlan.zhihu.com/donglaoshi/20082628" target="_blank" rel="external">http://zhuanlan.zhihu.com/donglaoshi/20082628</a> )<br>CDH 5.4 新功能：敏感数据处理(Sensitive Data Redaction)<br><a href="http://blog.cloudera.com/blog/2015/06/new-in-cdh-5-4-sensitive-data-redaction/" target="_blank" rel="external">http://blog.cloudera.com/blog/2015/06/new-in-cdh-5-4-sensitive-data-redaction/</a> </p>
<p>Hortonworks<br>YARN的CapacityScheduler对Resource-preemption的支持<br><a href="http://hortonworks.com/blog/better-slas-via-resource-preemption-in-yarns-capacityscheduler/" target="_blank" rel="external">http://hortonworks.com/blog/better-slas-via-resource-preemption-in-yarns-capacityscheduler/</a><br>Hadoop集群对Multihoming的支持<br><a href="http://hortonworks.com/blog/multihoming-on-hadoop-yarn-clusters/" target="_blank" rel="external">http://hortonworks.com/blog/multihoming-on-hadoop-yarn-clusters/</a><br>HDP 2.3企业级HDFS数据加密<br><a href="http://hortonworks.com/blog/new-in-hdp-2-3-enterprise-grade-hdfs-data-at-rest-encryption/" target="_blank" rel="external">http://hortonworks.com/blog/new-in-hdp-2-3-enterprise-grade-hdfs-data-at-rest-encryption/</a><br>Apache Slider 0.80.0版本发布<br><a href="http://hortonworks.com/blog/announcing-apache-slider-0-80-0/" target="_blank" rel="external">http://hortonworks.com/blog/announcing-apache-slider-0-80-0/</a><br>Apache Spark 1.3.1 on HDP 2.2<br><a href="http://hortonworks.com/blog/apache-spark-on-hdp-learn-try-and-do/" target="_blank" rel="external">http://hortonworks.com/blog/apache-spark-on-hdp-learn-try-and-do/</a><br><a href="http://hortonworks.com/hadoop-tutorial/using-apache-spark-technical-preview-with-hdp-2-2/" target="_blank" rel="external">http://hortonworks.com/hadoop-tutorial/using-apache-spark-technical-preview-with-hdp-2-2/</a><br>Ambari 2.0.1 和 HDP 2.2.6 发布<br><a href="http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.2.6/bk_HDP_RelNotes/content/ch_relnotes_v226.html" target="_blank" rel="external">http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.2.6/bk_HDP_RelNotes/content/ch_relnotes_v226.html</a><br><a href="http://docs.hortonworks.com/HDPDocuments/Ambari-2.0.1.0/bk_releasenotes_ambari_2.0.1.0/content/ch_relnotes-ambari-2.0.1.0.html" target="_blank" rel="external">http://docs.hortonworks.com/HDPDocuments/Ambari-2.0.1.0/bk_releasenotes_ambari_2.0.1.0/content/ch_relnotes-ambari-2.0.1.0.html</a></p>
<p>其他：<br>Graphite的百万Metrics实践之路<br><a href="http://calvin1978.blogcn.com/articles/graphite.html" target="_blank" rel="external">http://calvin1978.blogcn.com/articles/graphite.html</a><br>HBaseCon 2015 大会幻灯片 &amp; 视频<br><a href="http://hbasecon.com/archive.html" target="_blank" rel="external">http://hbasecon.com/archive.html</a><br>HBase在腾讯大数据的应用实践<br><a href="http://www.d1net.com/bigdata/news/353500.html" target="_blank" rel="external">http://www.d1net.com/bigdata/news/353500.html</a><br>从Spark到Hadoop的架构实践<br><a href="http://www.csdn.net/article/2015-06-08/2824889" target="_blank" rel="external">http://www.csdn.net/article/2015-06-08/2824889</a><br>56网大数据<br><a href="http://share.csdn.net/slides/10903" target="_blank" rel="external">http://share.csdn.net/slides/10903</a><br>七牛技术总监陈超：记Spark Summit China 2015<br><a href="http://www.csdn.net/article/2015-04-30/2824594-spark-summit-china-2015" target="_blank" rel="external">http://www.csdn.net/article/2015-04-30/2824594-spark-summit-china-2015</a><br>唯品会美研中心郭安琪：2015 Hadoop Summit见闻<br><a href="http://zhuanlan.zhihu.com/donglaoshi/20072576" target="_blank" rel="external">http://zhuanlan.zhihu.com/donglaoshi/20072576</a><br>华为叶琪：论Spark Streaming的数据可靠性和一致性<br><a href="http://www.csdn.net/article/2015-06-12/2824938" target="_blank" rel="external">http://www.csdn.net/article/2015-06-12/2824938</a><br>Hadoop Summit 2015<br><a href="http://2015.hadoopsummit.org/san-jose/agenda/" target="_blank" rel="external">http://2015.hadoopsummit.org/san-jose/agenda/</a><br>Spark Summit 2015<br><a href="https://spark-summit.org/2015/" target="_blank" rel="external">https://spark-summit.org/2015/</a> </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Pinot：LinkedIn的实时数据分析系统<br><a href="http://www.infoq.com/cn/news/2014/10/linkdln" target="_blank" rel="external">http://www.infoq.com/cn/]]>
    </summary>
    
      <category term="CDH" scheme="http://navigating.github.io/tags/CDH/"/>
    
      <category term="HBase" scheme="http://navigating.github.io/tags/HBase/"/>
    
      <category term="HDP" scheme="http://navigating.github.io/tags/HDP/"/>
    
      <category term="Hadoop" scheme="http://navigating.github.io/tags/Hadoop/"/>
    
      <category term="Spark" scheme="http://navigating.github.io/tags/Spark/"/>
    
      <category term="技术" scheme="http://navigating.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[大数据动态之201505]]></title>
    <link href="http://navigating.github.io/2015/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8A%A8%E6%80%81%E4%B9%8B201505/"/>
    <id>http://navigating.github.io/2015/大数据动态之201505/</id>
    <published>2015-05-19T02:17:28.000Z</published>
    <updated>2015-08-01T09:57:53.841Z</updated>
    <content type="html"><![CDATA[<p>近期动态：<br>Hadoop 2.7发布。<br>Hortonworks HDP 2.2.4.2发布。<br>Ambari 2.0发布。<br>Cloudera Enterperise 5.4发布。<br>Hive 1.2.0 发布，支持Hive on Spark。</p>
<p>HDP 2.2/HDP 2.2.4/Ambari 2.0/Ambari 2.0.1</p>
<pre><code><span class="bullet">1. </span>HDP支持异构存储Heterogeneous storage，主要是对SSD的支持；
<span class="bullet">2. </span>Hive开始支持 ACID 事务，向企业级应用场景前进了一大步；
<span class="bullet">3. </span>HDP支持Spark 1.2.1；
<span class="bullet">4. </span>HDP支持通过DominantResourceCalculator对CPU的资源隔离与资源调度；
<span class="bullet">5. </span>Ambari 支持Blurprint，通过 REST API 管理和运维有更好的支持；
<span class="bullet">6. </span>Ambari 支持Stacks，通过Stacks方式来定义一系列的集成组件；
<span class="bullet">7. </span>Ambari 2.0支持HDP 2.2平台的Rolling Upgrades；
<span class="bullet">8. </span>Ambari 2.0支持安装、配置Apache Ranger；
<span class="bullet">9. </span>Ambari 2.0开始集成Ambari Alerts；
<span class="bullet">10. </span>Ambari 2.0开始集成Ambari Metrics，替代之前的Ganglia；
<span class="bullet">11. </span>Ambari 2.0开始支持User Views功能，User Views提供给运维人员更好的界面，包括Tez View、Capacity Scheduler View、Hive View、Pig View、Files View；
</code></pre><p>HDP 2.2之后部署的结构与之前有调整，新部署的结构与说明如下：</p>
<p>目录结构<br>从HDP 2.2之后，HDP安装后的目录结构发生了变化，之前安装后的Hadoop在/usr/lib目录下，现在变更到/usr/hdp目录下，结构如下：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"> &#123;code&#125;</span><br><span class="line">├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>hadoop</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>hadoop/bin</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>hadoop<span class="regexp">/conf -&gt; /</span>etc<span class="regexp">/hadoop/</span>conf</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>hadoop/lib</span><br><span class="line">│   │   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>hadoop<span class="regexp">/lib/</span>native</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>hadoop/libexec</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>hadoop/man</span><br><span class="line">│   └── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>hadoop/sbin</span><br><span class="line">├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>hadoop-hdfs</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>hadoop-hdfs/bin</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>hadoop-hdfs/lib</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>hadoop-hdfs/sbin</span><br><span class="line">│   └── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>hadoop-hdfs/webapps</span><br><span class="line">├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>hbase</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>hbase/bin</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>hbase<span class="regexp">/conf -&gt; /</span>etc<span class="regexp">/hbase/</span>conf</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>hbase/doc</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>hbase/include</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>hbase/lib</span><br><span class="line">└── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>zookeeper</span><br><span class="line">├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>zookeeper/bin</span><br><span class="line">├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>zookeeper<span class="regexp">/conf -&gt; /</span>etc<span class="regexp">/zookeeper/</span>conf</span><br><span class="line">├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>zookeeper/doc</span><br><span class="line">├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>zookeeper/lib</span><br><span class="line">├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.0.0-2041/</span>zookeeper/man</span><br><span class="line"> &#123;code&#125;</span><br><span class="line"> &#123;code&#125;</span><br><span class="line"><span class="regexp">/usr/</span>hdp/<span class="number">2.2</span>.3.0-<span class="number">2611</span></span><br><span class="line">├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>hadoop</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>hadoop/bin</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>hadoop<span class="regexp">/conf -&gt; /</span>etc<span class="regexp">/hadoop/</span>conf</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>hadoop/lib</span><br><span class="line">│   │   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>hadoop<span class="regexp">/lib/</span>native</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>hadoop/libexec</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>hadoop/man</span><br><span class="line">│   └── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>hadoop/sbin</span><br><span class="line">├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>hadoop-hdfs</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>hadoop-hdfs/bin</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>hadoop-hdfs/lib</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>hadoop-hdfs/sbin</span><br><span class="line">│   └── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>hadoop-hdfs/webapps</span><br><span class="line">├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>hbase</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>hbase/bin</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>hbase<span class="regexp">/conf -&gt; /</span>etc<span class="regexp">/hbase/</span>conf</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>hbase/doc</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>hbase/include</span><br><span class="line">│   ├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>hbase/lib</span><br><span class="line">└── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>zookeeper</span><br><span class="line">├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>zookeeper/bin</span><br><span class="line">├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>zookeeper<span class="regexp">/conf -&gt; /</span>etc<span class="regexp">/zookeeper/</span>conf</span><br><span class="line">├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>zookeeper/doc</span><br><span class="line">├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>zookeeper/lib</span><br><span class="line">├── <span class="regexp">/usr/</span>hdp<span class="regexp">/2.2.3.0-2611/</span>zookeeper/man</span><br><span class="line"> &#123;code&#125;</span><br></pre></td></tr></table></figure></p>
<p>管理活动版本<br>HDP 2.0之后推出了hdp-select服务，通过这个服务可以管理活动版本，默认就会安装hdp-select，可以通过hdp-select命令验证是否安装。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; hdp-<span class="keyword">select</span><br><span class="line"></span>&gt; hdp-<span class="keyword">select </span>versions</span><br></pre></td></tr></table></figure></p>
<p>同样支持管理命令，例如：</p>
<pre><code>&gt; <span class="tag">hdp-select</span> <span class="tag">set</span> <span class="tag">hadoop-hdfs-datanode</span> 2<span class="class">.2</span><span class="class">.3</span><span class="class">.0-2600</span>
</code></pre><p>安装后的库、工具和脚本<br>库<br>HDP 2.0之前安装后库放在/usr/lib下，现在放在/usr/hdp/current下：</p>
<pre><code><span class="regexp">/usr/</span>hdp<span class="regexp">/current/</span>hadoop-hdfs-namenode/
<span class="regexp">/usr/</span>hdp<span class="regexp">/current/</span>hadoop-yarn-resourcemanager
<span class="regexp">/usr/</span>hdp<span class="regexp">/current/</span>hadoop-mapreduce-client/hadoop-mapreduce-examples.jar
</code></pre><p>Daemon Scripts</p>
<pre><code><span class="regexp">/usr/</span>hdp<span class="regexp">/current/</span>hadoop-hdfs-namenode<span class="regexp">/../</span>hadoop<span class="regexp">/sbin/</span>hadoop-deamon.sh
<span class="regexp">/usr/</span>hdp<span class="regexp">/current/</span>hadoop-yarn-resourcemanager<span class="regexp">/sbin/y</span>arn-daemon.sh
<span class="regexp">/usr/</span>hdp<span class="regexp">/current/</span>hadoop-yarn-nodemanager<span class="regexp">/sbin/y</span>arn-daemon.sh
</code></pre><p>Configuration files</p>
<pre><code><span class="regexp">/etc/</span>hadoop<span class="regexp">/conf</span>
</code></pre><p>Bin Scripts</p>
<pre><code><span class="regexp">/usr/</span>bin<span class="regexp">/hadoop -&gt; /u</span>sr<span class="regexp">/hdp/</span>current<span class="regexp">/hadoop-client/</span>bin<span class="regexp">/hadoop</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>近期动态：<br>Hadoop 2.7发布。<br>Hortonworks HDP 2.2.4.2发布。<br>Ambari 2.0发布。<br>Cloudera Enterperise 5.4发布。<br>Hive 1.2.0 发布，支持Hive on Spark。</p]]>
    </summary>
    
      <category term="Ambari" scheme="http://navigating.github.io/tags/Ambari/"/>
    
      <category term="CDH" scheme="http://navigating.github.io/tags/CDH/"/>
    
      <category term="HDP" scheme="http://navigating.github.io/tags/HDP/"/>
    
      <category term="Hadoop" scheme="http://navigating.github.io/tags/Hadoop/"/>
    
      <category term="Hive" scheme="http://navigating.github.io/tags/Hive/"/>
    
      <category term="技术" scheme="http://navigating.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[大数据动态之201502]]></title>
    <link href="http://navigating.github.io/2015/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8A%A8%E6%80%81%E4%B9%8B201502/"/>
    <id>http://navigating.github.io/2015/大数据动态之201502/</id>
    <published>2015-03-24T14:10:07.000Z</published>
    <updated>2015-08-01T02:27:00.393Z</updated>
    <content type="html"><![CDATA[<p>本月Hadoop技术动态：<br>1.经过6年的孵化，Hive 1.0 发布了。<br>2.经过7年的孵化，HBase 1.0 发布了。<br>3.Cloudera 开始提供 Hive-on-Spark Beta版的下载。</p>
<p>HBase 1.0 需要特别关注的特性：<br>1.API的重新组织和变更；<br>2.读的高可用；<br>3.在线配置变更；</p>
<p>HDP 2.2 发布有一段时间：<br><a href="http://hortonworks.com/blog/announcing-hive-1-0-stable-moment-time/" target="_blank" rel="external">http://hortonworks.com/blog/announcing-hive-1-0-stable-moment-time/</a><br><a href="http://hortonworks.com/blog/start-new-era-apache-hbase-1-0/" target="_blank" rel="external">http://hortonworks.com/blog/start-new-era-apache-hbase-1-0/</a><br><a href="http://blog.cloudera.com/blog/2015/02/apache-hbase-1-0-is-released/" target="_blank" rel="external">http://blog.cloudera.com/blog/2015/02/apache-hbase-1-0-is-released/</a><br><a href="http://blog.cloudera.com/blog/2015/02/download-the-hive-on-spark-beta/" target="_blank" rel="external">http://blog.cloudera.com/blog/2015/02/download-the-hive-on-spark-beta/</a><br><a href="https://issues.apache.org/jira/secure/attachment/12652517/Hive-on-Spark.pdf" target="_blank" rel="external">https://issues.apache.org/jira/secure/attachment/12652517/Hive-on-Spark.pdf</a></p>
<p>Cluster Manager Framework:<br>1.YARN<br>2.Apache Helix</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本月Hadoop技术动态：<br>1.经过6年的孵化，Hive 1.0 发布了。<br>2.经过7年的孵化，HBase 1.0 发布了。<br>3.Cloudera 开始提供 Hive-on-Spark Beta版的下载。</p>
<p>HBase 1.0 需要特别关注的特]]>
    </summary>
    
      <category term="CDH" scheme="http://navigating.github.io/tags/CDH/"/>
    
      <category term="HDP" scheme="http://navigating.github.io/tags/HDP/"/>
    
      <category term="Hadoop" scheme="http://navigating.github.io/tags/Hadoop/"/>
    
      <category term="Spark" scheme="http://navigating.github.io/tags/Spark/"/>
    
      <category term="技术" scheme="http://navigating.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2013年年终总结]]></title>
    <link href="http://navigating.github.io/2013/2013%E5%B9%B4%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://navigating.github.io/2013/2013年年终总结/</id>
    <published>2013-12-31T14:23:51.000Z</published>
    <updated>2015-08-04T14:25:21.847Z</updated>
    <content type="html"><![CDATA[<p>又到了一年总结的时候，今年倒是有点晚了。感觉今年的时间过得飞快，放佛没感觉到时光的流逝，一直没想总结这事，这两天才开始琢磨。</p>
<p>年初给自己的两个目标，一个是多读书，一个是多了解架构知识。</p>
<p>多读书，这点上今年倒是读了不少杂书，包括：</p>
<p>重读了金庸的几本武侠小说，几本书基本上以前也读过，再次阅读，一是回想当初读的那个情景、那个思绪映像，另外再读的时候完全换了视角了，以一种置身世外的解读的心态来看，常常揣摩主人公在场景下的心态与抉择；</p>
<p>重读了四大名著除红楼之外的三部，特别是《西游记》，是第一次去读，以前只翻过几页，都没看过，一直觉得应该当着故事会来读，真读起来，才发现书中有很多有意思的地方，比方说书的第一主角真应该算是孙悟空吧，还有唐僧、孙悟空、猪八戒、沙和尚的关系和观念，都很有意思，还有孙悟空的诚心打动了猪八戒，确是一本可以细读的书。</p>
<p>读了《明朝那些事儿》《浪潮之巅》《乔布斯传》《基业长青》《创新者的窘境》等，读的都很粗线条，大部分都没有细读和做笔记。</p>
<p>另外有Kindle读了一些书，Kindle读书确实很方便，对我来说唯一的缺陷就是翻页查找太不方便了，对于我这种记忆里不好的人来说比较累。</p>
<p>了解架构，关于架构的书读得少，了解一下架构的范围和大致概念，比较收获的是开始去理解EA和TOGAF，可能他们对工作不会起到很大的直接作用，但发现对工作有非常大的辅助作用。架构方面实际脚踏实地的做事上做的很欠缺。</p>
<p>工作上今年做的事，大部分都能反映到WIKI上去，这里就不说了，想对自己说的就是：太被动，主动做的事儿太少。</p>
<p>言而总之，总而言之，这一年在读书和工作上对自己的评价是，看的多，做的少，创新的东西更少。身体健康方面是：体重增加了，锻炼减少了。</p>
<p>今年给自己打分，也就60分吧。</p>
<p>说了过去，就得展望一下未来：</p>
<p>读书这块，当然要继续读，下一步可能会更聚焦，有目的性的去读一些书。少随意性的阅读，多一些专注的阅读。</p>
<p>同时会把博客捡起来，坚持写博客，记录自己的想法。</p>
<p>工作这块，现在还没有想好，脑子里就是一些可能大家都知道的关键词，希望自己能做到：多创新，多行动，就是坚持做一些没做过的事；要主动，要规划，要坚持；要能落地的事，多总结积累。</p>
<p>用这篇小文，记录那渐行渐远的2013，迎接蓬勃而来的2014。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>又到了一年总结的时候，今年倒是有点晚了。感觉今年的时间过得飞快，放佛没感觉到时光的流逝，一直没想总结这事，这两天才开始琢磨。</p>
<p>年初给自己的两个目标，一个是多读书，一个是多了解架构知识。</p>
<p>多读书，这点上今年倒是读了不少杂书，包括：</p>
<p>重]]>
    </summary>
    
      <category term="生活" scheme="http://navigating.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[响应式网页设计(Responsive Web Design)]]></title>
    <link href="http://navigating.github.io/2013/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-Responsive-Web-Design/"/>
    <id>http://navigating.github.io/2013/响应式网页设计-Responsive-Web-Design/</id>
    <published>2013-08-11T15:04:46.000Z</published>
    <updated>2015-08-03T15:07:27.893Z</updated>
    <content type="html"><![CDATA[<p>响应式网页设计，也叫：自适应网页设计。2010年，由Ethan Marcotte提出这个名词(Responsive Web Design) ，指可以自动识别屏幕宽度、并做出相应调整的网页设计。其目的就是希望搭建一个网站能够满足兼容多种终端的需求，不再是为每一种终端定制开发一个版本。应该是，这个思想主要是应对当前Web应用在各种移动终端上展示的挑战的。</p>
<p>主要的应对策略：</p>
<p>允许网页宽度自动调整；<br>不允许绝对宽度；<br>使用相对大小的字体；<br>流动布局；<br>选择加载CSS；<br>CSS的@media规则；<br>图片的自适应。<br>参考：<br><a href="http://alistapart.com/article/responsive-web-design" target="_blank" rel="external">http://alistapart.com/article/responsive-web-design</a><br><a href="http://www.ruanyifeng.com/blog/2012/05/responsive_web_design.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2012/05/responsive_web_design.html</a><br><a href="http://www.qianduan.net/responsive-web-design.html" target="_blank" rel="external">http://www.qianduan.net/responsive-web-design.html</a><br><a href="http://www.qianduan.net/media-type-and-media-query.html" target="_blank" rel="external">http://www.qianduan.net/media-type-and-media-query.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>响应式网页设计，也叫：自适应网页设计。2010年，由Ethan Marcotte提出这个名词(Responsive Web Design) ，指可以自动识别屏幕宽度、并做出相应调整的网页设计。其目的就是希望搭建一个网站能够满足兼容多种终端的需求，不再是为每一种终端定制开发一]]>
    </summary>
    
      <category term="技术" scheme="http://navigating.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HBTC 2012 见闻]]></title>
    <link href="http://navigating.github.io/2012/HBTC-2012-%E8%A7%81%E9%97%BB/"/>
    <id>http://navigating.github.io/2012/HBTC-2012-见闻/</id>
    <published>2012-12-25T15:05:29.000Z</published>
    <updated>2015-08-03T15:06:54.617Z</updated>
    <content type="html"><![CDATA[<p>今年Hadoop大会，加上了BigData，全称“Hadoop&amp;Bigdata Technology Conference(Hadoop与大数据技术大会)”，随着“云计算”“Hadoop”“大数据”的热点，今年的大会事先很是期待，之后从中收获很多，坚信了我们在工作中的一些判断。从我的视角，今年HBTC主要覆盖如下的内容：<br>Hadoop与BigData主要的产品进展：<br>1.Hortonworks Hadoop/HBase<br>2.Intel Hadoop/Free Edition<br>3.Huawei Contributing Hadoop/HBase<br>4.Facebook Hadoop/HBase<br>5.Vmware Hadoop Virtualization<br>6.Oracle NoSQL<br>7.Taobao Tair<br>8.eBay Hadoop/HBase<br>意外的是Huawei对Hadoop社区的贡献度很大；Hortonworks只是一般性的宣讲，并没有重大的消息或者特性宣布。<br>Hadoop生态圈中本次被关注的技术：<br>1.Hadoop Security(Etu)<br>2.HIVE<br>3.HDFS Namenode<br>4.HBase<br>5.Pig<br>今年重点被关注的是HBase、Hive。<br>应用方面:<br>1.阿里Hadoop集群<br>a.3200台服务器，30K核，内存10TB，存储36K磁盘60PB。<br>b.支撑支付宝、CBU、聚划算、一淘、天猫、淘宝,1K+客户端/100+部门<br>c.Hadoop组件：Hive、Streaming MR、Mahout、Pig、HBase<br>d.客户端，用户/用户组权限管理/资源管理，申请/审批；云梯医生/JobTracker心跳频率/NameNode RPC性能指标；<br>e.数据采集：TimeTunnel分布式日志收集，DataX数据库同步，DBSync大表增量同步；<br>2.HIVE在腾讯分布式数据仓库<br>a.腾讯分布式数据仓库，简称：TDW；<br>b.基于Hadoop/Hive/PostgreSQL构建；<br>c.特性列表：存储和计算容灾/存储和计算线性扩展，SQL语言/SQL函数，过程语言，多维分析，MR，多种存储结构，SQL/MED，开发工具，任务调度系统，系统DB<br>d.TDW在Hive基础上进行的功能增强：    基于角色的权限管理；    兼容Oracle的分区功能；    窗口函数；多维分析；公用表表达式；DML(Update/Delete)；入库数据校验；命令行工具；DB存储引擎；SQL语法细节增强；Eclipse IDE开发环境/流程开发工具；自定义的存储格式；Hash Join；按行split；Order by limit优化；<br>3.阿里数据交换平台<br>a.平台能力：存储与计算的调度、元数据管理、数据建模、IDE；市场应用：应用市场、数据市场；数据管理：预警、质量监控、ODS、生命周期管理；数据开发：安全、审计、计量、监控；<br>b.分析可视化；数据可视化；<br>c.ODPS：开放；服务化；离线数据分析服务；<br>d.ODS：开放与共享；源头数据质量监控；元数据管理；<br>4.百度大数据平台<br>a.基础能力包括：分布式存储(KV/Table)；计算(批量计算/小批量计算/流式计算)；调度(底层资源管理/上层通用调度)；数据仓库体系(格式化/传输/数据仓库/报表&amp;多维分析引擎/Ad Hoc查询引擎/BI)<br>b.OLAP查询以MySQL作为前端。<br>5.IBM在Hadoop/大数据方面的架构与实践<br>6.Startup企业MemSQL提供实时查询方案<br>7.Yahoo Hadoop应用、运维，还有其基于Hadoop的Data workflow<br>学校<br>有不少做研究的老师过来传道，其中有不少精华的东西，特别是哈尔滨工业大学的李建中和俄亥俄州立大学的张晓东教授给我留下了深刻的印象。<br>缺失<br>1.实时查询/流计算内容很少；也许会是明年的热点吧；<br>2.Cloudera/MapR都厂商没有来，无法面对面了解其一些技术特点和产品特性；<br>个人总结<br>1.技术上，今年Hadoop生态圈的热点是HBase、HDFS NameNode、HDFS Security;<br>2.应用与平台上，阿里/淘宝发展最快，其次是腾讯/百度。这三个公司的Hadoop集群为公司内部众多部门提供hadoop平台服务，特别是阿里比较突出，其中共有的特性：<br>    a.工作的内容都是围绕为内部提供Hadoop集群/大数据服务平台；<br>    b.技术路线都是以Hadoop、HBase、Hive/Pig、关系型数据库为主；<br>    c.用户查询语言以兼容SQL语言为主；<br>    d.计算查询主要是以批量计算、实时查询为主；<br>    e.可视化方面的工作基本雷同：分析可视化、数据可视化、数据流程编排可视化；<br>    f.平台在安全、隔离、调度、元数据管理、监控、预警告警、服务化、数据集成与共享等方面提供功能。<br>3.实时查询/流计算，虽然今年没有覆盖，但是各个厂商都有提到自己已经在这两个方面着手或者取得了一些进展。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今年Hadoop大会，加上了BigData，全称“Hadoop&amp;Bigdata Technology Conference(Hadoop与大数据技术大会)”，随着“云计算”“Hadoop”“大数据”的热点，今年的大会事先很是期待，之后从中收获很多，坚信了我们在工作中]]>
    </summary>
    
      <category term="BigData" scheme="http://navigating.github.io/tags/BigData/"/>
    
      <category term="HBase" scheme="http://navigating.github.io/tags/HBase/"/>
    
      <category term="HDP" scheme="http://navigating.github.io/tags/HDP/"/>
    
      <category term="Hadoop" scheme="http://navigating.github.io/tags/Hadoop/"/>
    
      <category term="Hive" scheme="http://navigating.github.io/tags/Hive/"/>
    
      <category term="技术" scheme="http://navigating.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RubyOnRails实战]]></title>
    <link href="http://navigating.github.io/2007/RubyOnRails%E5%AE%9E%E6%88%98/"/>
    <id>http://navigating.github.io/2007/RubyOnRails实战/</id>
    <published>2007-06-28T04:08:43.000Z</published>
    <updated>2015-08-01T04:19:52.943Z</updated>
    <content type="html"><![CDATA[<p>简单开始<br>下载并且安装</p>
<pre><code><span class="tag">Ruby</span> 1<span class="class">.8</span><span class="class">.4</span>;
<span class="tag">RubyGems</span>;
</code></pre><p>通过命令行安装所有的Rails和其依赖：</p>
<pre><code>gem <span class="keyword">install</span> rails --<span class="keyword">include</span>-dependencies
</code></pre><p>在用户工作目录运行命令行，即创建第一个rails的模板：</p>
<pre><code>rails depot
<span class="keyword">cd</span> depot
<span class="keyword">ruby</span> script/server
</code></pre><p>在浏览器打开 <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a> 即可发现第一个rails的web应用已经开始run起来了。</p>
<p>然后我参考书籍《Agile Web Development with Rails》2nd Edition的第一个例子一步一步的动手写了第一个ROR程序。(具体的过程不详细记录了.)<br>从数据库准备、数据库的配置、创建表、migrate、创建controller和maintenance、add missing column、添加validation功能、使用scaffold、定制html、装填unit test数据。整个例子的思路比较清晰，从数据库、数据访问、业务、controller、展示；给我留下深刻的影响的是：自动生成功能、内嵌web server、支持数据库配置，支持应用的模板、支持mvc模板等，所以让人似乎感觉到一些DSL的色彩。</p>
<p>做一个复杂一些的例子<br>数据库准备<br>支持数据库Mysql，从 <a href="http://dev.mysql.com/downloads/mysql/5.0.html#downloads" target="_blank" rel="external">http://dev.mysql.com/downloads/mysql/5.0.html#downloads</a> 下载数据库Mysql安装，并且下载Mysql Administrator作为数据库管理工具。<br>创建Schema为：</p>
<pre><code>depot_dev
</code></pre><p>在文件./config/database.yml中对数据库进行配置：</p>
<pre><code><span class="attribute">development</span>:
  <span class="attribute">adapter</span>: mysql
  <span class="attribute">database</span>: depot_dev
  <span class="attribute">username</span>: depot
  <span class="attribute">password</span>: depot
  <span class="attribute">host</span>: localhost
</code></pre><p>测试配置：</p>
<pre><code><span class="tag">rake</span> <span class="rule"><span class="attribute">db</span>:<span class="value">migrate</span></span>
</code></pre><p>如果配置不正确在控制台会出现错误的日志。<br>创建Products的Model和Table如下：</p>
<pre><code>D:<span class="command">\IDE</span><span class="command">\rails</span>-exampe<span class="command">\depot</span>&gt;ruby script/generate model product
</code></pre><p>输出：</p>
<pre><code>exists  <span class="keyword">app</span>/models/
exists  <span class="keyword">test</span>/unit/
exists  <span class="keyword">test</span>/fixtures/
create  <span class="keyword">app</span>/models/product.rb
create  <span class="keyword">test</span>/unit/product_test.rb
create  <span class="keyword">test</span>/fixtures/products.yml
create  <span class="keyword">db</span>/migrate
create  <span class="keyword">db</span>/migrate/001_create_products.rb
</code></pre><p>在./db/migrate/001_create_products.rb用类似DDL的形式表达表的结构:</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">CreateProducts</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Migration</span></span></span>
  <span class="function"><span class="keyword">def</span> </span><span class="keyword">self</span>.up
    create_table <span class="symbol">:products</span> <span class="keyword">do</span> |t|
      t.column <span class="symbol">:title</span>,       <span class="symbol">:string</span>
      t.column <span class="symbol">:description</span>, <span class="symbol">:text</span>
      t.column <span class="symbol">:image_url</span>,   <span class="symbol">:string</span>
    <span class="keyword">end</span>
  <span class="keyword">end</span>

  <span class="function"><span class="keyword">def</span> </span><span class="keyword">self</span>.down
    drop_table <span class="symbol">:products</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
</code></pre><p>Okey，那就Migrate吧：</p>
<pre><code>D:<span class="command">\IDE</span><span class="command">\rails</span>-exampe<span class="command">\depot</span>&gt;rake db:migrate
</code></pre><p>输出：</p>
<pre><code><span class="constant">D</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:Warning</span><span class="symbol">:</span> require_gem is obsolete.  <span class="constant">Use</span> gem instead.
(<span class="keyword">in</span> <span class="constant">D</span><span class="symbol">:/IDE/rails-exampe/depot</span>)
== <span class="constant">CreateProducts</span><span class="symbol">:</span> migrating ==================================================
-- create_table(<span class="symbol">:products</span>)
   -&gt; <span class="number">0</span>.<span class="number">07</span>80s
== <span class="constant">CreateProducts</span><span class="symbol">:</span> migrated (<span class="number">0</span>.<span class="number">07</span>80s) =========================================
</code></pre><p>数据库一切搞定，下一步开始应用层了，首先创建Controller: </p>
<pre><code>D:<span class="command">\IDE</span><span class="command">\rails</span>-exampe<span class="command">\depot</span>&gt;ruby script/generate controller admin
</code></pre><p>输出：</p>
<pre><code>exists  app<span class="regexp">/controllers/</span>
exists  app<span class="regexp">/helpers/</span>
create  app<span class="regexp">/views/</span>admin
exists  test<span class="regexp">/functional/</span>
create  app<span class="regexp">/controllers/</span>admin_controller.rb
create  test<span class="regexp">/functional/</span>admin_controller_test.rb
create  app<span class="regexp">/helpers/</span>admin_helper.rb
</code></pre><p>创建Maintenance应用：<br>编辑app/controller/admin_controller.rb  </p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">AdminController</span> <span class="inheritance">&lt; <span class="parent">ApplicationController</span></span></span>
  scaffold <span class="symbol">:product</span>
<span class="keyword">end</span>
</code></pre><p>启动ruby script/server,通过浏览器就可以浏览这个Rail scaffolds的应用了。<br>迭代2:Add a missing column</p>
<pre><code><span class="keyword">D</span>:\IDE\rails-exampe\depot&gt;ruby script/<span class="keyword">generate</span> migration add_price
      exists  <span class="keyword">db</span>/migrate
      create  <span class="keyword">db</span>/migrate/002_add_price.rb
</code></pre><p>编辑db/migrate/002_add_price.rb</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">AddPrice</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Migration</span></span></span>
  <span class="function"><span class="keyword">def</span> </span><span class="keyword">self</span>.up
    add_column <span class="symbol">:products</span>, <span class="symbol">:price</span>, <span class="symbol">:decimal</span>, <span class="symbol">:precision</span> =&gt; <span class="number">8</span>, <span class="symbol">:scale</span> =&gt; <span class="number">2</span>, <span class="symbol">:default</span> =&gt; <span class="number">0</span>
  <span class="keyword">end</span>

  <span class="function"><span class="keyword">def</span> </span><span class="keyword">self</span>.down
    remove_column <span class="symbol">:products</span>, <span class="symbol">:price</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
</code></pre><p>执行命令：</p>
<pre><code>D:<span class="command">\IDE</span><span class="command">\rails</span>-exampe<span class="command">\depot</span>&gt;rake db:migrate
</code></pre><p>输出：</p>
<pre><code><span class="constant">D</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:Warning</span><span class="symbol">:</span> require_gem is obsolete.  <span class="constant">Use</span> gem instead.
(<span class="keyword">in</span> <span class="constant">D</span><span class="symbol">:/IDE/rails-exampe/depot</span>)
== <span class="constant">AddPrice</span><span class="symbol">:</span> migrating ========================================================
-- add_column(<span class="symbol">:products</span>, <span class="symbol">:price</span>, <span class="symbol">:decimal</span>, {<span class="symbol">:default=&gt;</span><span class="number">0</span>, <span class="symbol">:precision=&gt;</span><span class="number">8</span>, <span class="symbol">:scale=&gt;</span><span class="number">2</span>})
-&gt; <span class="number">0</span>.<span class="number">2650</span>s
== <span class="constant">AddPrice</span><span class="symbol">:</span> migrated (<span class="number">0</span>.<span class="number">2650</span>s) ===============================================
</code></pre><p>一切Okey,第二个迭代也已经结束:)<br>第三个迭代：Validate!<br>编辑app/model/product.rb文件：</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Product</span> <span class="inheritance">&lt; <span class="parent">ActiveRecord::Base</span></span></span>
  validates_presence_of <span class="symbol">:title</span>, <span class="symbol">:description</span>, <span class="symbol">:image_url</span>
  validates_numericality_of <span class="symbol">:price</span>
  validates_uniqueness_of <span class="symbol">:title</span>
  validates_format_of <span class="symbol">:image_url</span>, 
                      <span class="symbol">:with</span>    =&gt; <span class="regexp">%r{\.(gif|jpg|png)$}i</span>,
                      <span class="symbol">:message</span> =&gt; <span class="string">"must be a URL for a GIF, JPG, or PNG image"</span>

  protected
  <span class="function"><span class="keyword">def</span> </span>validate
    errors.add(<span class="symbol">:price</span>, <span class="string">"should be at least 0.01"</span>) <span class="keyword">if</span> price.<span class="keyword">nil</span>? ||  price &lt; <span class="number">0</span>.<span class="number">01</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
</code></pre><p>第四个迭代：Prettier Listings<br>创建静态的scaffold如下：   </p>
<pre><code><span class="keyword">D</span>:\IDE\rails-exampe\depot&gt;ruby script/<span class="keyword">generate</span> scaffold product admin
      exists  <span class="keyword">app</span>/controllers/
      exists  <span class="keyword">app</span>/helpers/
      exists  <span class="keyword">app</span>/views/admin
      exists  <span class="keyword">app</span>/views/layouts/
      exists  <span class="keyword">test</span>/functional/
  dependency  model
      exists    <span class="keyword">app</span>/models/
      exists    <span class="keyword">test</span>/unit/
      exists    <span class="keyword">test</span>/fixtures/
        skip    <span class="keyword">app</span>/models/product.rb
   identical    <span class="keyword">test</span>/unit/product_test.rb
   identical    <span class="keyword">test</span>/fixtures/products.yml
      create  <span class="keyword">app</span>/views/admin/_form.rhtml
      create  <span class="keyword">app</span>/views/admin/<span class="keyword">list</span>.rhtml
      create  <span class="keyword">app</span>/views/admin/show.rhtml
      create  <span class="keyword">app</span>/views/admin/new.rhtml
      create  <span class="keyword">app</span>/views/admin/<span class="keyword">edit</span>.rhtml
overwrite <span class="keyword">app</span>/controllers/admin_controller.rb? [Ynaqd] <span class="literal">y</span>
       force  <span class="keyword">app</span>/controllers/admin_controller.rb
overwrite <span class="keyword">test</span>/functional/admin_controller_test.rb? [Ynaqd] <span class="literal">y</span>
       force  <span class="keyword">test</span>/functional/admin_controller_test.rb
   identical  <span class="keyword">app</span>/helpers/admin_helper.rb
overwrite <span class="keyword">app</span>/views/layouts/admin.rhtml? [Ynaqd] <span class="literal">y</span>
       force  <span class="keyword">app</span>/views/layouts/admin.rhtml
      create  public/stylesheets/scaffold.css
</code></pre><p>定制list.rhtml:  </p>
<pre><code><span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"product-list"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Product Listing<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>

  <span class="tag">&lt;<span class="title">table</span> <span class="attribute">cellpadding</span>=<span class="value">"5"</span> <span class="attribute">cellspacing</span>=<span class="value">"0"</span>&gt;</span>
  </span>&lt;%<span class="ruby"> <span class="keyword">for</span> product <span class="keyword">in</span> <span class="variable">@products</span> </span>%&gt;<span class="xml">
    <span class="tag">&lt;<span class="title">tr</span> <span class="attribute">valign</span>=<span class="value">"top"</span> <span class="attribute">class</span>=<span class="value">"</span></span></span>&lt;%=<span class="ruby"> cycle(<span class="string">'list-line-odd'</span>, <span class="string">'list-line-even'</span>) </span>%&gt;<span class="xml"><span class="tag"><span class="value">"</span>&gt;</span>

      <span class="tag">&lt;<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;<span class="title">img</span> <span class="attribute">class</span>=<span class="value">"list-image"</span> <span class="attribute">src</span>=<span class="value">"</span></span></span>&lt;%=<span class="ruby"> product.image_url </span>%&gt;<span class="xml"><span class="tag"><span class="value">"</span>/&gt;</span>
      <span class="tag">&lt;/<span class="title">td</span>&gt;</span>

      <span class="tag">&lt;<span class="title">td</span> <span class="attribute">width</span>=<span class="value">"60%"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"list-title"</span>&gt;</span></span>&lt;%=<span class="ruby"> h(product.title) </span>%&gt;<span class="xml"><span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span>
        </span>&lt;%=<span class="ruby"> h(truncate(product.description, <span class="number">80</span>)) </span>%&gt;<span class="xml">
      <span class="tag">&lt;/<span class="title">td</span>&gt;</span>

      <span class="tag">&lt;<span class="title">td</span> <span class="attribute">class</span>=<span class="value">"list-actions"</span>&gt;</span>
        </span>&lt;%=<span class="ruby"> link_to <span class="string">'Show'</span>, <span class="symbol">:action</span> =&gt; <span class="string">'show'</span>, <span class="symbol">:id</span> =&gt; product </span>%&gt;<span class="xml"><span class="tag">&lt;<span class="title">br</span>/&gt;</span>
        </span>&lt;%=<span class="ruby"> link_to <span class="string">'Edit'</span>, <span class="symbol">:action</span> =&gt; <span class="string">'edit'</span>, <span class="symbol">:id</span> =&gt; product </span>%&gt;<span class="xml"><span class="tag">&lt;<span class="title">br</span>/&gt;</span>
        </span>&lt;%=<span class="ruby"> link_to <span class="string">'Destroy'</span>, { <span class="symbol">:action</span>  =&gt; <span class="string">'destroy'</span>, <span class="symbol">:id</span> =&gt; product },
                                 <span class="symbol">:confirm</span> =&gt; <span class="string">"Are you sure?"</span>,
                                 <span class="symbol">:method</span>  =&gt; <span class="symbol">:post</span> </span>%&gt;<span class="xml">
      <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
  </span>&lt;%<span class="ruby"> <span class="keyword">end</span> </span>%&gt;<span class="xml">
  <span class="tag">&lt;/<span class="title">table</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>

</span>&lt;%=<span class="ruby">  <span class="keyword">if</span> <span class="variable">@product_pages</span>.current.previous 
       link_to(<span class="string">"Previous page"</span>, { <span class="symbol">:page</span> =&gt; <span class="variable">@product_pages</span>.current.previous })
     <span class="keyword">end</span>
</span>%&gt;<span class="xml">
</span>&lt;%=<span class="ruby"> <span class="keyword">if</span> <span class="variable">@product_pages</span>.current.<span class="keyword">next</span> 
      link_to(<span class="string">"Next page"</span>, { <span class="symbol">:page</span> =&gt; <span class="variable">@product_pages</span>.current.<span class="keyword">next</span> })
    <span class="keyword">end</span>
</span>%&gt;<span class="xml">

<span class="tag">&lt;<span class="title">br</span> /&gt;</span>

</span>&lt;%=<span class="ruby"> link_to <span class="string">'New product'</span>, <span class="symbol">:action</span> =&gt; <span class="string">'new'</span> </span>%&gt;<span class="xml"></span>
</code></pre><p>增加测试数据： </p>
<pre><code><span class="keyword">D</span>:\IDE\rails-exampe\depot&gt;ruby script/<span class="keyword">generate</span> migration add_test_data
      exists  <span class="keyword">db</span>/migrate
      create  <span class="keyword">db</span>/migrate/003_add_test_data.rb
</code></pre><p>编辑db/migrate/003_add_test_data.rb:  </p>
<pre><code><span class="keyword">class</span> <span class="type">AddTestData</span> &lt; <span class="type">ActiveRecord</span>::<span class="type">Migration</span>
  def self.up
    <span class="type">Product</span>.delete_all
    <span class="type">Product</span>.create(:title =&gt; <span class="symbol">'Pragmatic</span> <span class="type">Version</span> <span class="type">Control'</span>,
      :description =&gt;
      %{&lt;p&gt;
        <span class="type">This</span> book is a recipe-based approach <span class="keyword">to</span> using <span class="type">Subversion</span> that will
        get you up <span class="keyword">and</span> running quickly--<span class="keyword">and</span> correctly. <span class="type">All</span> projects need
    version control: it's a foundational piece <span class="keyword">of</span> any project's
    infrastructure. <span class="type">Yet</span> half <span class="keyword">of</span> all project teams <span class="keyword">in</span> the <span class="type">U</span>.<span class="type">S</span>. don't use
    any version control at all. <span class="type">Many</span> others don't use it well, <span class="keyword">and</span> <span class="keyword">end</span>
    up experiencing time-consuming problems.
      &lt;/p&gt;},
    :image_url =&gt; <span class="char">'/images/svn.jpg'</span>,
    :price =&gt; <span class="number">28.50</span>)
  <span class="keyword">end</span>

  def self.down
    <span class="type">Product</span>.delete_all
  <span class="keyword">end</span>
<span class="keyword">end</span>
</code></pre><p>安装测试数据：</p>
<pre><code>D:<span class="command">\IDE</span><span class="command">\rails</span>-exampe<span class="command">\depot</span>&gt;rake db:migrate
</code></pre><p>输出：</p>
<pre><code><span class="constant">D</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:Warning</span><span class="symbol">:</span> require_gem is obsolete.  <span class="constant">Use</span> gem instead.
(<span class="keyword">in</span> <span class="constant">D</span><span class="symbol">:/IDE/rails-exampe/depot</span>)
== <span class="constant">AddTestData</span><span class="symbol">:</span> migrating =====================================================
== <span class="constant">AddTestData</span><span class="symbol">:</span> migrated (<span class="number">0</span>.<span class="number">2030</span>s) ============================================
</code></pre><p>编辑Layouts:app/views/layouts/admin.rhtml  </p>
<pre><code><span class="xml"><span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span>
<span class="tag">&lt;<span class="title">html</span>&gt;</span>
<span class="tag">&lt;<span class="title">head</span>&gt;</span>
  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Admin: </span>&lt;%=<span class="ruby"> controller.action_name </span>%&gt;<span class="xml"><span class="tag">&lt;/<span class="title">title</span>&gt;</span>
  </span>&lt;%=<span class="ruby"> stylesheet_link_tag <span class="string">'scaffold'</span>, <span class="string">'depot'</span> </span>%&gt;<span class="xml">
<span class="tag">&lt;/<span class="title">head</span>&gt;</span>
<span class="tag">&lt;<span class="title">body</span>&gt;</span>
<span class="tag">&lt;<span class="title">p</span> <span class="attribute">style</span>=<span class="value">"color: green"</span>&gt;</span></span>&lt;%=<span class="ruby"> flash[<span class="symbol">:notice</span>] </span>%&gt;<span class="xml"><span class="tag">&lt;/<span class="title">p</span>&gt;</span>
</span>&lt;%=<span class="ruby"> <span class="keyword">yield</span> <span class="symbol">:layout</span> </span>%&gt;<span class="xml">
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span></span>
</code></pre><p>编辑：app/views/admin/list.rhtml</p>
<pre><code><span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"product-list"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Product Listing<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>

  <span class="tag">&lt;<span class="title">table</span> <span class="attribute">cellpadding</span>=<span class="value">"5"</span> <span class="attribute">cellspacing</span>=<span class="value">"0"</span>&gt;</span>
  </span>&lt;%<span class="ruby"> <span class="keyword">for</span> product <span class="keyword">in</span> <span class="variable">@products</span> </span>%&gt;<span class="xml">
    <span class="tag">&lt;<span class="title">tr</span> <span class="attribute">valign</span>=<span class="value">"top"</span> <span class="attribute">class</span>=<span class="value">"</span></span></span>&lt;%=<span class="ruby"> cycle(<span class="string">'list-line-odd'</span>, <span class="string">'list-line-even'</span>) </span>%&gt;<span class="xml"><span class="tag"><span class="value">"</span>&gt;</span>

      <span class="tag">&lt;<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;<span class="title">img</span> <span class="attribute">class</span>=<span class="value">"list-image"</span> <span class="attribute">src</span>=<span class="value">"</span></span></span>&lt;%=<span class="ruby"> product.image_url </span>%&gt;<span class="xml"><span class="tag"><span class="value">"</span>/&gt;</span>
      <span class="tag">&lt;/<span class="title">td</span>&gt;</span>

      <span class="tag">&lt;<span class="title">td</span> <span class="attribute">width</span>=<span class="value">"60%"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"list-title"</span>&gt;</span></span>&lt;%=<span class="ruby"> h(product.title) </span>%&gt;<span class="xml"><span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span>
        </span>&lt;%=<span class="ruby"> h(truncate(product.description, <span class="number">80</span>)) </span>%&gt;<span class="xml">
      <span class="tag">&lt;/<span class="title">td</span>&gt;</span>

      <span class="tag">&lt;<span class="title">td</span> <span class="attribute">class</span>=<span class="value">"list-actions"</span>&gt;</span>
        </span>&lt;%=<span class="ruby"> link_to <span class="string">'Show'</span>, <span class="symbol">:action</span> =&gt; <span class="string">'show'</span>, <span class="symbol">:id</span> =&gt; product </span>%&gt;<span class="xml"><span class="tag">&lt;<span class="title">br</span>/&gt;</span>
        </span>&lt;%=<span class="ruby"> link_to <span class="string">'Edit'</span>, <span class="symbol">:action</span> =&gt; <span class="string">'edit'</span>, <span class="symbol">:id</span> =&gt; product </span>%&gt;<span class="xml"><span class="tag">&lt;<span class="title">br</span>/&gt;</span>
        </span>&lt;%=<span class="ruby"> link_to <span class="string">'Destroy'</span>, { <span class="symbol">:action</span>  =&gt; <span class="string">'destroy'</span>, <span class="symbol">:id</span> =&gt; product },
                                 <span class="symbol">:confirm</span> =&gt; <span class="string">"Are you sure?"</span>,
                                 <span class="symbol">:method</span>  =&gt; <span class="symbol">:post</span> </span>%&gt;<span class="xml">
      <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
  </span>&lt;%<span class="ruby"> <span class="keyword">end</span> </span>%&gt;<span class="xml">
  <span class="tag">&lt;/<span class="title">table</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>

</span>&lt;%=<span class="ruby">  <span class="keyword">if</span> <span class="variable">@product_pages</span>.current.previous 
       link_to(<span class="string">"Previous page"</span>, { <span class="symbol">:page</span> =&gt; <span class="variable">@product_pages</span>.current.previous })
     <span class="keyword">end</span>
</span>%&gt;<span class="xml">
</span>&lt;%=<span class="ruby"> <span class="keyword">if</span> <span class="variable">@product_pages</span>.current.<span class="keyword">next</span> 
      link_to(<span class="string">"Next page"</span>, { <span class="symbol">:page</span> =&gt; <span class="variable">@product_pages</span>.current.<span class="keyword">next</span> })
    <span class="keyword">end</span>
</span>%&gt;<span class="xml">

<span class="tag">&lt;<span class="title">br</span> /&gt;</span>

</span>&lt;%=<span class="ruby"> link_to <span class="string">'New product'</span>, <span class="symbol">:action</span> =&gt; <span class="string">'new'</span> </span>%&gt;<span class="xml"></span>
</code></pre><p>参考：<br><a href="http://www.rubyonrails.org/down" target="_blank" rel="external">http://www.rubyonrails.org/down</a><br>书籍《Agile Web Development with Rails》2nd Edition</p>
<p>另，JSR 315: Java Servlet 3.0 Specification under review at JCP：<a href="http://jcp.org/en/jsr/detail?id=315可以看到Servlet" target="_blank" rel="external">http://jcp.org/en/jsr/detail?id=315可以看到Servlet</a> 3.0的规范中要涉及到的一些东西。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>简单开始<br>下载并且安装</p>
<pre><code><span class="tag">Ruby</span> 1<span class="class">.8</span><span class="class">.4</span>;
<span class="tag]]>
    </summary>
    
      <category term="技术" scheme="http://navigating.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Google Guice实战]]></title>
    <link href="http://navigating.github.io/2007/Google-Guice%E5%AE%9E%E6%88%98/"/>
    <id>http://navigating.github.io/2007/Google-Guice实战/</id>
    <published>2007-05-31T03:54:49.000Z</published>
    <updated>2015-08-01T04:02:00.065Z</updated>
    <content type="html"><![CDATA[<p>Guice(pronounced “juice”)发布了1.0版本.<br>首先看看Guice的定位：an ultra-lightweight, next-generation dependency injection container for Java 5 and later.<br>这是一个基于Java 5及后续版本的轻量级依赖注入容器。Martin Fowler关于依赖注入的精彩讨论参见：<a href="http://www.martinfowler.com/articles/injection.html#InversionOfControl" target="_blank" rel="external">http://www.martinfowler.com/articles/injection.html#InversionOfControl</a><br>在这篇讨论中涉及到几种注入方式：Constructor Injection、Setter Injection、Interface Injection;<br>实际应用开发中依赖的注入问题自始至终都伴随着我们，当我们走过了最简单直接的手动注入、运用模式进行注入，到依赖于框架，当前成熟的框架众多，例如：Spring IOC、PicoContainer、Hivemind等；那么Guice作为一个依赖注入的framework，又是怎么定位自己的呢？其special的地方又在哪儿呢？我们首先看一个非常简单的例子：<br>对于注入描述的类如下：</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyModule</span> <span class="keyword">implements</span> <span class="title">Module</span> </span>{
    <span class="keyword">public</span> <span class="keyword">void</span> configure(Binder binder) {
        binder.bind(Service.<span class="keyword">class</span>).to(ServiceImpl.<span class="keyword">class</span>).<span class="keyword">in</span>(Scopes.SINGLETON);
    }
}
</code></pre><p>依赖注入发生的地方：</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>{

    <span class="keyword">private</span> <span class="keyword">final</span> Service service;

    <span class="annotation">@Inject</span>
    <span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">(Service service)</span> </span>{
        <span class="keyword">this</span>.service = service;
    }

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>{
        service.go();
    }
}
</code></pre><p>从这个例子我们可以清晰看出，Guice的依赖注入已经不同于以往的三种注入模式了，Okey，你已经看到了Guice充分使用了Java的新特性annotation来进行依赖注入的，已经完全跨越了Constructor Injection、Setter Injection、Interface Injection的概念了。这样，依赖注入只是需要一个或者多个annotation而已，一切搞定。<br>下一步我看看Guice这个Framework是要如何进行依赖注入的？<br>我们首先看看Guice的Architecture.</p>
<pre><code>public class MyModule implements Module {
   <span class="keyword"> public</span> void<span class="function"> configure(</span>Binder binder<span class="function">)</span> {
        // Bind Foo to FooImpl. Guice will create a<span class="instruction"> new
</span>        //<span class="instruction"> instance </span>of FooImpl for every injection.
       <span class="function"> binder.bind(</span>Foo.class<span class="function">)</span>.to(FooImpl.class<span class="function">)</span>;

        // Bind Bar to an<span class="instruction"> instance </span>of Bar.
        Bar bar =<span class="instruction"> new </span>Bar(<span class="function">)</span>;
       <span class="function"> binder.bind(</span>Bar.class<span class="function">)</span>.toInstance(bar<span class="function">)</span>;
    }
}
</code></pre><p>该部分代码的sequence diagram如下：</p>
<p>运行时Guice的依赖注入的绑定器structure如下：</p>
<p>很明显的看到，一个注入的绑定关联主键Key、Scope、Provider；其中Key包含了依赖的Type和Annotation.<br>看到了Guice的简单绑定，一定会有一个疑问：就是一个类型的多个绑定怎么实现？Guice是运行Annotation binding来解决这个问题的。<br>例如绑定代码如下：</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BindingModule</span> <span class="keyword">implements</span> <span class="title">Module</span> {</span>

    <span class="keyword">public</span> <span class="typename">void</span> configure(Binder binder) {
        binder.bind(IService.<span class="keyword">class</span>).annotatedWith(Blue.<span class="keyword">class</span>).to(BlueService.<span class="keyword">class</span>);

    }

}
注入代码如下：

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BindingClient</span> {</span>
    <span class="comment">// @Inject</span>
    <span class="comment">// @Blue</span>
    <span class="comment">// private IService service;</span>

    <span class="keyword">private</span> IService service;

    <span class="annotation">@Inject</span>
    <span class="keyword">public</span> <span class="typename">void</span> injectService(<span class="annotation">@Blue</span> IService service) {
        <span class="keyword">this</span>.service = service;
    }

    <span class="keyword">public</span> <span class="typename">void</span> go() {
        <span class="keyword">this</span>.service.go();
    }
}
annotation部分代码：

<span class="annotation">@Retention</span>(RetentionPolicy.RUNTIME)
<span class="annotation">@Target</span>({ElementType.FIELD, ElementType.PARAMETER})
<span class="annotation">@BindingAnnotation</span>
<span class="keyword">public</span> <span class="annotation">@interface</span> Blue {

}
</code></pre><p>如果再复杂一些，Guice还支持有属性的annotation:<br>绑定代码</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NamedModule</span> <span class="keyword">implements</span> <span class="title">Module</span> </span>{

<span class="comment">/*
* (non-Javadoc)
* 
* @see com.google.inject.Module#configure(com.google.inject.Binder)
*/</span>
<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Binder binder)</span> </span>{
    binder.bind(IPerson.class).annotatedWith(<span class="keyword">new</span> NamedAnnotation(<span class="string">"Bob"</span>)).to(Bob.class);
}

}
注入代码：
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NamedClient</span> </span>{

    <span class="annotation">@Inject</span>
    <span class="annotation">@Named</span>(<span class="string">"Bob"</span>)
    <span class="keyword">private</span> IPerson person;

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>{
        <span class="keyword">this</span>.person.say();
    }
}
annotation代码：

<span class="annotation">@Retention</span>(RetentionPolicy.RUNTIME)
<span class="annotation">@Target</span>({ElementType.FIELD, ElementType.PARAMETER})
<span class="annotation">@BindingAnnotation</span>
<span class="keyword">public</span> <span class="annotation">@interface</span> Named {
    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;
}

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NamedAnnotation</span> <span class="keyword">implements</span> <span class="title">Named</span> </span>{

    <span class="keyword">private</span> String value;

    <span class="function"><span class="keyword">public</span> <span class="title">NamedAnnotation</span><span class="params">(String value)</span></span>{
        <span class="keyword">this</span>.value = value;
    }
    <span class="comment">/*
    * (non-Javadoc)
    * 
    * @see com.neusoft.anno.Named#value()
    */</span>
    <span class="function"><span class="keyword">public</span> String <span class="title">value</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> value;
    }

    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> <span class="number">127</span> * <span class="string">"value"</span>.hashCode() ^ value.hashCode();
    }

    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>{
    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Named))
        <span class="keyword">return</span> <span class="keyword">false</span>;
        Named other = (Named) o;
        <span class="keyword">return</span> value.equals(other.value());
    }

    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> <span class="string">"@"</span> + Named.class.getName() + <span class="string">"(value="</span> + value + <span class="string">")"</span>;
    }

    <span class="comment">/*
    * (non-Javadoc)
    * 
    * @see java.lang.annotation.Annotation#annotationType()
    */</span>
    <span class="function"><span class="keyword">public</span> Class <span class="title">annotationType</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> Named.class;
    }

}
</code></pre><p>通过这几个例子，可以清晰看到，Guice应用annotation进行注入的关联的，用module将依赖关系组装起来，提供给客户端代码进行使用；而且annotation是可以自由定制的，支持灵活扩展的。</p>
<p>Guice本身也支持实现类的直接绑定：</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MixerModule</span> <span class="keyword">implements</span> <span class="title">Module</span> </span>{

    <span class="comment">/*
    * (non-Javadoc)
    * 
    * @see com.google.inject.Module#configure(com.google.inject.Binder)
    */</span>
    <span class="keyword">public</span> <span class="keyword">void</span> configure(Binder binder) {
        binder.bind(Concrete.<span class="keyword">class</span>);

    }

}
</code></pre><p>Guice有一种隐式绑定，其方法是这样，针对一个接口，如果缺少显式绑定，Guice 会寻找一个指向具体实现的@ImplementedBy标注。</p>
<pre><code><span class="annotation">@ImplementedBy</span>(GoodNightImpl.class)
    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IGoodNight</span> </span>{

    <span class="function"><span class="keyword">void</span> <span class="title">goodNight</span><span class="params">()</span></span>;
    }

    <span class="annotation">@Singleton</span>
    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodNightImpl</span> <span class="keyword">implements</span> <span class="title">IGoodNight</span> </span>{

    <span class="comment">/*
    * (non-Javadoc)
    * 
    * @see com.neusoft.nobinding.IGoodNight#goodNight()
    */</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goodNight</span><span class="params">()</span> </span>{
        System.out.println(<span class="string">"Good night!"</span>);
    }

}
</code></pre><p>那么，Provider是怎么回事呢？“有时对于每次注入，客户代码需要某个依赖的多个实例。其它时候，客户可能不想在一开始就真地获取对象，而是等到注入后的某个时候再获取。对于任意绑定类型 T，你可以不直接注入 T 的实例，而是注入一个 Provider，然后在需要的时候调用 Provider.get()”因此，可以使用Provider去真正的来创建依赖的对象实例，直到需要的时候才创建客户代码需要的实例。</p>
<p>Provider等绑定代码：</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WidgetModule</span> <span class="keyword">implements</span> <span class="title">Module</span> {</span>

    <span class="comment">/*
    * (non-Javadoc)
    * 
    * @see com.google.inject.Module#configure(com.google.inject.Binder)
    */</span>
    <span class="keyword">public</span> <span class="typename">void</span> configure(Binder binder) {
        binder.bind(IService.<span class="keyword">class</span>).to(WidgetService.<span class="keyword">class</span>).<span class="keyword">in</span>(Scopes.SINGLETON);
        binder.bind(Widget.<span class="keyword">class</span>).toProvider(WidgetProvider.<span class="keyword">class</span>);
    }

}
Provider的注入：

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Widget</span> {</span>
    <span class="keyword">private</span> IService service;

    <span class="annotation">@Inject</span> Provider provider;

    <span class="keyword">public</span> Widget(IService service){
        <span class="keyword">this</span>.service = service;
    }

    <span class="keyword">public</span> <span class="typename">void</span> go(){
        <span class="keyword">this</span>.service.go();
    }
}
Provider的实现：

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WidgetProvider</span> <span class="keyword">implements</span> <span class="title">Provider</span> {</span>

    <span class="keyword">final</span> IService service;

    <span class="annotation">@Inject</span>
    WidgetProvider(IService service) {
        <span class="keyword">this</span>.service = service;
    }

    <span class="keyword">public</span> Widget get() {
        <span class="keyword">return</span> <span class="keyword">new</span> Widget(service);
    }

}
</code></pre><p>Service的接口和实现：</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IService</span> </span>{

    <span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>;

}
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WidgetService</span> <span class="keyword">implements</span> <span class="title">IService</span> </span>{

    <span class="comment">/* (non-Javadoc)
    * @see com.neusoft.service.IService#go()
    */</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>{
        System.out.println(<span class="string">"Widget Service Hello."</span>);
    }

}
</code></pre><p>客户代码：</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WidgetApplication</span> </span>{

    <span class="comment">/**
    * @param args
    */</span>
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) {
        Injector injector = Guice.createInjector(<span class="keyword">new</span> WidgetModule());
        Widget widget = injector.getInstance(Widget.<span class="keyword">class</span>);
        widget.go();
    }

}
</code></pre><p>这个例子完全表达出了Provider的价值所在。<br>另外，Guice也提供了Constant Values以及Converting Stings的支持：<br>Guice会针对Primitive types、primitive wrapper types、Strings、Enums、Classes类型进行类型的自动判断绑定机制。对于Primitive types、primitive wrapper types,如果 Guice 仍然无法找到一个的显式绑定，它会去找一个拥有相同绑定标注的常量 String 绑定，并试图将字符串转换到相应的值。<br>这就是一个Guice如何进行依赖注入的一个基本的思路，可以看到Guice的代码量十分少，是一个不错的依赖注入的方案，也将会推动依赖注入的进步。<br>参考：<br>Guice项目：<a href="http://code.google.com/p/google-guice/" target="_blank" rel="external">http://code.google.com/p/google-guice/</a><br>Guice中文文档：<a href="http://docs.google.com/View?docid=dqp53rg_3hjf3ch" target="_blank" rel="external">http://docs.google.com/View?docid=dqp53rg_3hjf3ch</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Guice(pronounced “juice”)发布了1.0版本.<br>首先看看Guice的定位：an ultra-lightweight, next-generation dependency injection container for Java 5 and la]]>
    </summary>
    
      <category term="技术" scheme="http://navigating.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[走向Miami(原名：重返Miami)]]></title>
    <link href="http://navigating.github.io/2007/%E8%B5%B0%E5%90%91Miami-%E5%8E%9F%E5%90%8D%EF%BC%9A%E9%87%8D%E8%BF%94Miami/"/>
    <id>http://navigating.github.io/2007/走向Miami-原名：重返Miami/</id>
    <published>2007-05-20T03:53:21.000Z</published>
    <updated>2015-08-01T03:53:53.184Z</updated>
    <content type="html"><![CDATA[<p>为什么重返Miami，在自己内心深处，不知道什么是出路的时候，这不是一种逃避，是一种面对，但不是“重新”，寻找到内心很多寂寥，若有若无的种种境地。<br>在飞机在北太平洋上空，在强气流，在阳光所洒在的云层中穿梭的时候，我多么强烈的意识到一个人是必须要面对人的一生必须要面对的许许多多事情的。如同人最后一定要离开一个世界一样，无所谓失败，无所谓失去，无所谓面对。我想我是太执著于在自己过去的阴影之下，太过于执著于一种心情。<br>“许多人生活在‘其实我很希望。。。只是很可惜。。。’的模式中，找借口完全接触不到你的生命，使你不能经历成长的喜悦。只有真刀真枪地面对自己，才了解生命和幸福的深度。”当我看到一个朋友的签名的时候，不禁也想起另外一个朋友的话，“如果你要找借口，一百个你都能找到。”<br>（翻开我的blog和自己的心情，就如同一个朋友曾经一语道破为如同“失恋”的心态。悲观的心态可能有积极的人生吗?）“先知，先觉，先行”，王阳明先生“知行合一”。无论多少心情，多少道理，都不如行动来的猛烈。<br>有梦想，有目标，究竟每一天能有多少东西能够沉淀下来？为了梦想，为了目标。““无产阶级失去的只是枷锁”，如果人的一生有枷锁，就是一个人的心；最难改变的是性格中的不肯改变。准备好了吗，改变一切不肯改变的？<br>重返Miami，在于能够释放自己，释放自己平和稳定的心境，放下、放松；真刀真枪的面对自己；改变不肯改变的自己；在自己的内心寻找到自己。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>为什么重返Miami，在自己内心深处，不知道什么是出路的时候，这不是一种逃避，是一种面对，但不是“重新”，寻找到内心很多寂寥，若有若无的种种境地。<br>在飞机在北太平洋上空，在强气流，在阳光所洒在的云层中穿梭的时候，我多么强烈的意识到一个人是必须要面对人的一生必须要面对的]]>
    </summary>
    
      <category term="生活" scheme="http://navigating.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 5.0的Instrumentation特性]]></title>
    <link href="http://navigating.github.io/2007/Java-5-0%E7%9A%84Instrumentation%E7%89%B9%E6%80%A7/"/>
    <id>http://navigating.github.io/2007/Java-5-0的Instrumentation特性/</id>
    <published>2007-05-19T03:30:36.000Z</published>
    <updated>2015-08-01T03:50:31.536Z</updated>
    <content type="html"><![CDATA[<p>Java 5发布有一段时间了，Instrumentation这个feature是Java 5新提供的。其方式是通过修改字节码的方式使得Java开发人员能够操作类。官方文档说主要是给工具提供修改应用的状态、行为使用的:)<br>先来个简单的例子看看到底什么是Instrumentation:<br>在JSE 1.5.0的Javadoc的看到java.lang.instrument仅有两个接口ClassFileTransformer和Instrumentation。我们就看看着两个接口的用法：</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Greeting</span> <span class="title">implements</span> <span class="title">ClassFileTransformer</span> {

    <span class="comment">//字节码转换在这个方法中进行。</span>
    <span class="keyword">public</span> <span class="keyword">byte</span>[] transform(ClassLoader arg0, String classname, Class arg2, ProtectionDomain arg3, <span class="keyword">byte</span>[] arg4)
    throws IllegalClassFormatException {
        System.<span class="keyword">out</span>.printf(<span class="string">"hello:"</span> + classname);
        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[]{};
    }

    <span class="comment">//options是通过命令行传递给虚拟机的参数。</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span>(<span class="params">String options, Instrumentation ins</span>) </span>{
        <span class="keyword">if</span> (options != <span class="keyword">null</span>) {
            System.<span class="keyword">out</span>.printf(<span class="string">" I've been called with options: \"%s\"\n"</span>, options);
        } <span class="keyword">else</span>
            System.<span class="keyword">out</span>.println(<span class="string">" I've been called with no options."</span>);
            ins.addTransformer(<span class="keyword">new</span> Greeting());
        }

    }

    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sample</span> {

    <span class="comment">/**
    * @param args
    */</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>{
        (<span class="keyword">new</span> Sample()).hello();

    }

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span>(<span class="params"></span>) </span>{
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) {
        <span class="keyword">int</span> index =<span class="number">0</span>;
        index++;
        }
    }

}
</code></pre><p>使用命令行参数的命令行：</p>
<pre><code><span class="tag">java</span> <span class="rule"><span class="attribute">-javaagent</span>:<span class="value">Greeting.jar=<span class="string">"Hello, Sample"</span> Sample</span></span>
</code></pre><p>因此下一步是需要打个jar包，jar包中包含META-INF/MANIFEST.MF和Class文件。<br>其中META-INF/MANIFEST.MF的内容如下：<br>    Manifest-Version: 1.0<br>    Premain-Class: Timing</p>
<p>包含的类文件有：Greeting.class和Sample.class<br>打包：</p>
<pre><code>jar cvfM greeting<span class="class">.jar</span> *
</code></pre><p>输出：<br>    adding: Greeting.class(in = 1774) (out= 869)(deflated 51%)<br>    adding: META-INF/(in = 0) (out= 0)(stored 0%)<br>    adding: META-INF/MANIFEST.MF(in = 44) (out= 46)(deflated -4%)<br>    adding: Sample.class(in = 556) (out= 371)(deflated 33%)</p>
<pre><code>运行命令行：

<span class="tag">java</span> <span class="rule"><span class="attribute">-javaagent</span>:<span class="value">greeting.jar=<span class="string">"Hello,Sample"</span> Greeting</span></span>
</code></pre><p>控制台输出：<br>    I’ve been called with options: “Hello,Sample”</p>
<p>运行命令行：</p>
<pre><code><span class="tag">java</span> <span class="rule"><span class="attribute">-javaagent</span>:<span class="value">greeting.jar=<span class="string">"Hello,Sample"</span> Sample</span></span>
</code></pre><p>控制台输出：<br>    I’ve been called with options: “Hello,Sample”<br>    hello:Sample</p>
<p>通过这个例子估计Instrutment API使用的方法已经基本上有了个理解了。<br>下面就是举一个用apache bcel构造bytecode的Instrutment的实际的例子：</p>
<p>使用 instrumentation ，使用Apache 开源项目 BCEL修改bytecode，实现用于计算一个方法运行时间的功能。这种方式，用于性能测量的语句与业务逻辑完全分离，同时也可以用于测量任意类的任意方法的 运行时间，提高了代码的重用性。</p>
<pre><code><span class="keyword">import</span> java.io.<span class="type">ByteArrayOutputStream</span>;
<span class="keyword">import</span> java.io.<span class="type">IOException</span>;
<span class="keyword">import</span> java.lang.instrument.<span class="type">ClassFileTransformer</span>;
<span class="keyword">import</span> java.lang.instrument.<span class="type">IllegalClassFormatException</span>;
<span class="keyword">import</span> java.lang.instrument.<span class="type">Instrumentation</span>;

<span class="keyword">import</span> org.apache.bcel.<span class="type">Constants</span>;
<span class="keyword">import</span> org.apache.bcel.classfile.<span class="type">ClassParser</span>;
<span class="keyword">import</span> org.apache.bcel.classfile.<span class="type">JavaClass</span>;
<span class="keyword">import</span> org.apache.bcel.classfile.<span class="type">Method</span>;
<span class="keyword">import</span> org.apache.bcel.<span class="keyword">generic</span>.<span class="type">ClassGen</span>;
<span class="keyword">import</span> org.apache.bcel.<span class="keyword">generic</span>.<span class="type">ConstantPoolGen</span>;
<span class="keyword">import</span> org.apache.bcel.<span class="keyword">generic</span>.<span class="type">InstructionConstants</span>;
<span class="keyword">import</span> org.apache.bcel.<span class="keyword">generic</span>.<span class="type">InstructionFactory</span>;
<span class="keyword">import</span> org.apache.bcel.<span class="keyword">generic</span>.<span class="type">InstructionList</span>;
<span class="keyword">import</span> org.apache.bcel.<span class="keyword">generic</span>.<span class="type">MethodGen</span>;
<span class="keyword">import</span> org.apache.bcel.<span class="keyword">generic</span>.<span class="type">ObjectType</span>;
<span class="keyword">import</span> org.apache.bcel.<span class="keyword">generic</span>.<span class="type">PUSH</span>;
<span class="keyword">import</span> org.apache.bcel.<span class="keyword">generic</span>.<span class="type">Type</span>;

public class <span class="type">Timing</span> implements <span class="type">ClassFileTransformer</span> {

    private <span class="type">String</span> methodName;

    private <span class="type">Timing</span>(<span class="type">String</span> methodName) {
        this.methodName = methodName;
        <span class="type">System</span>.<span class="keyword">out</span>.println(methodName);
    }

    public byte[] transform(<span class="type">ClassLoader</span> loader, <span class="type">String</span> className, <span class="type">Class</span> cBR, java.security.<span class="type">ProtectionDomain</span> pD, byte[] classfileBuffer) throws <span class="type">IllegalClassFormatException</span> {
        <span class="keyword">try</span> {
            <span class="type">ClassParser</span> cp = new <span class="type">ClassParser</span>(new java.io.<span class="type">ByteArrayInputStream</span>(classfileBuffer), className + <span class="string">".java"</span>);
            <span class="type">JavaClass</span> jclas = cp.parse();
            <span class="type">ClassGen</span> cgen = new <span class="type">ClassGen</span>(jclas);
            <span class="type">Method</span>[] methods = jclas.getMethods();
            <span class="type">int</span> index;
            <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; methods.length; index++) {
                <span class="keyword">if</span> (methods[index].getName().equals(methodName)) {
                    <span class="keyword">break</span>;
                }
            }

            <span class="keyword">if</span> (index &lt; methods.length) {
                addTimer(cgen, methods[index]);
                <span class="type">ByteArrayOutputStream</span> bos = new <span class="type">ByteArrayOutputStream</span>();
                cgen.getJavaClass().dump(bos);
                <span class="keyword">return</span> bos.toByteArray();
            }
            <span class="type">System</span>.err.println(<span class="string">"Method "</span> + methodName + <span class="string">" not found in "</span> + className);
            <span class="type">System</span>.exit(<span class="number">0</span>);

        } catch (<span class="type">IOException</span> e) {
            <span class="type">System</span>.err.println(e);
            <span class="type">System</span>.exit(<span class="number">0</span>);
        }
        <span class="keyword">return</span> null; // <span class="type">No</span> transformation required
    }

    private <span class="keyword">static</span> <span class="type">void</span> addTimer(<span class="type">ClassGen</span> cgen, <span class="type">Method</span> <span class="keyword">method</span>) {

        // <span class="type">set</span> up the construction tools
        <span class="type">InstructionFactory</span> ifact = new <span class="type">InstructionFactory</span>(cgen);
        <span class="type">InstructionList</span> ilist = new <span class="type">InstructionList</span>();
        <span class="type">ConstantPoolGen</span> pgen = cgen.getConstantPool();
        <span class="type">String</span> cname = cgen.getClassName();
        <span class="type">MethodGen</span> wrapgen = new <span class="type">MethodGen</span>(<span class="keyword">method</span>, cname, pgen);
        wrapgen.setInstructionList(ilist);

        // rename a copy <span class="keyword">of</span> the original <span class="keyword">method</span>
        <span class="type">MethodGen</span> methgen = new <span class="type">MethodGen</span>(<span class="keyword">method</span>, cname, pgen);
        cgen.removeMethod(<span class="keyword">method</span>);
        <span class="type">String</span> iname = methgen.getName() + <span class="string">"_timing"</span>;
        methgen.setName(iname);
        cgen.addMethod(methgen.getMethod());
        <span class="type">Type</span> <span class="literal">result</span> = methgen.getReturnType();

        // compute the size <span class="keyword">of</span> the calling parameters
        <span class="type">Type</span>[] parameters = methgen.getArgumentTypes();
        <span class="type">int</span> stackIndex = methgen.isStatic() ? <span class="number">0</span> : <span class="number">1</span>;
        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; parameters.length; i++) {
            stackIndex += parameters[i].getSize();
        }

        // save time prior to invocation
        ilist.append(ifact.createInvoke(<span class="string">"java.lang.System"</span>, <span class="string">"currentTimeMillis"</span>, <span class="type">Type</span>.<span class="type">LONG</span>, <span class="type">Type</span>.<span class="type">NO_ARGS</span>, <span class="type">Constants</span>.<span class="type">INVOKESTATIC</span>));
        ilist.append(<span class="type">InstructionFactory</span>.createStore(<span class="type">Type</span>.<span class="type">LONG</span>, stackIndex));

        // call the wrapped <span class="keyword">method</span>
        <span class="type">int</span> offset = <span class="number">0</span>;
        short invoke = <span class="type">Constants</span>.<span class="type">INVOKESTATIC</span>;
        <span class="keyword">if</span> (!methgen.isStatic()) {
            ilist.append(<span class="type">InstructionFactory</span>.createLoad(<span class="type">Type</span>.<span class="type">OBJECT</span>, <span class="number">0</span>));
            offset = <span class="number">1</span>;
            invoke = <span class="type">Constants</span>.<span class="type">INVOKEVIRTUAL</span>;
        }
        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; parameters.length; i++) {
            <span class="type">Type</span> <span class="keyword">type</span> = parameters[i];
            ilist.append(<span class="type">InstructionFactory</span>.createLoad(<span class="keyword">type</span>, offset));
            offset += <span class="keyword">type</span>.getSize();
        }
        ilist.append(ifact.createInvoke(cname, iname, <span class="literal">result</span>, parameters, invoke));

        // store <span class="literal">result</span> <span class="keyword">for</span> <span class="keyword">return</span> later
        <span class="keyword">if</span> (<span class="literal">result</span> != <span class="type">Type</span>.<span class="type">VOID</span>) {
            ilist .append(<span class="type">InstructionFactory</span>.createStore(<span class="literal">result</span>, stackIndex + <span class="number">2</span>));
        }

        // print time required <span class="keyword">for</span> <span class="keyword">method</span> call
        ilist.append(ifact.createFieldAccess(<span class="string">"java.lang.System"</span>, <span class="string">"out"</span>, new <span class="type">ObjectType</span>(<span class="string">"java.io.PrintStream"</span>), <span class="type">Constants</span>.<span class="type">GETSTATIC</span>));
        ilist.append(<span class="type">InstructionConstants</span>.<span class="type">DUP</span>);
        ilist.append(<span class="type">InstructionConstants</span>.<span class="type">DUP</span>);
        <span class="type">String</span> text = <span class="string">"Call to method "</span> + methgen.getName() + <span class="string">" took "</span>;
        ilist.append(new <span class="type">PUSH</span>(pgen, text));
        ilist.append(ifact.createInvoke(<span class="string">"java.io.PrintStream"</span>, <span class="string">"print"</span>, <span class="type">Type</span>.<span class="type">VOID</span>, new <span class="type">Type</span>[] { <span class="type">Type</span>.<span class="type">STRING</span> }, <span class="type">Constants</span>.<span class="type">INVOKEVIRTUAL</span>));
        ilist.append(ifact.createInvoke(<span class="string">"java.lang.System"</span>, <span class="string">"currentTimeMillis"</span>, <span class="type">Type</span>.<span class="type">LONG</span>, <span class="type">Type</span>.<span class="type">NO_ARGS</span>, <span class="type">Constants</span>.<span class="type">INVOKESTATIC</span>));
        ilist.append(<span class="type">InstructionFactory</span>.createLoad(<span class="type">Type</span>.<span class="type">LONG</span>, stackIndex));
        ilist.append(<span class="type">InstructionConstants</span>.<span class="type">LSUB</span>);
        ilist.append(ifact.createInvoke(<span class="string">"java.io.PrintStream"</span>, <span class="string">"print"</span>,
        <span class="type">Type</span>.<span class="type">VOID</span>, new <span class="type">Type</span>[] { <span class="type">Type</span>.<span class="type">LONG</span> }, <span class="type">Constants</span>.<span class="type">INVOKEVIRTUAL</span>));
        ilist.append(new <span class="type">PUSH</span>(pgen, <span class="string">" ms."</span>));
        ilist.append(ifact.createInvoke(<span class="string">"java.io.PrintStream"</span>, <span class="string">"println"</span>, <span class="type">Type</span>.<span class="type">VOID</span>, new <span class="type">Type</span>[] { <span class="type">Type</span>.<span class="type">STRING</span> }, <span class="type">Constants</span>.<span class="type">INVOKEVIRTUAL</span>));

        // <span class="keyword">return</span> <span class="literal">result</span> <span class="keyword">from</span> wrapped <span class="keyword">method</span> call
        <span class="keyword">if</span> (<span class="literal">result</span> != <span class="type">Type</span>.<span class="type">VOID</span>) {
            ilist.append(<span class="type">InstructionFactory</span>.createLoad(<span class="literal">result</span>, stackIndex + <span class="number">2</span>));
        }
        ilist.append(<span class="type">InstructionFactory</span>.createReturn(<span class="literal">result</span>));

        // finalize the constructed <span class="keyword">method</span>
        wrapgen.stripAttributes(<span class="literal">true</span>);
        wrapgen.setMaxStack();
        wrapgen.setMaxLocals();
        cgen.addMethod(wrapgen.getMethod());
        ilist.dispose();
    }

    public <span class="keyword">static</span> <span class="type">void</span> premain(<span class="type">String</span> options, <span class="type">Instrumentation</span> ins) {
        <span class="keyword">if</span> (options != null) {
            ins.addTransformer(new <span class="type">Timing</span>(options));
        } <span class="keyword">else</span> {
            <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"Usage: java -javaagent:Timing.jar=\"class:method\""</span>);
            <span class="type">System</span>.exit(<span class="number">0</span>);
        }

    }
}
</code></pre><p>打jar包:</p>
<pre><code>$ jar cvfM timing<span class="class">.jar</span> *
</code></pre><p>输出：<br>    adding: META-INF/(in = 0) (out= 0)(stored 0%)<br>    adding: META-INF/MANIFEST.MF(in = 44) (out= 46)(deflated -4%)<br>    adding: Sample.class(in = 556) (out= 371)(deflated 33%)<br>    adding: Timing.class(in = 7372) (out= 3442)(deflated 53%)</p>
<p>运行命令行：</p>
<pre><code>$ java -classpath bcel-<span class="number">5.2</span><span class="class">.jar</span> -javaagent:timing.jar=<span class="string">"hello"</span> Sample
</code></pre><p>输出：<br>    hello<br>    Call to method hello_timing took 2047 ms.</p>
<p>运行命令：</p>
<pre><code>$ java -classpath bcel-<span class="number">5.2</span><span class="class">.jar</span> -javaagent:timing.jar=<span class="string">"main"</span> Sample
</code></pre><p>输出：<br>    main<br>    Call to method main_timing took 2469 ms.</p>
<p>通过这段代码，基本能够了解Instrument的用处之一了:)</p>
<p>参考：<a href="http://www.ibm.com/developerworks/cn/java/j-lo-instrumentation/" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/java/j-lo-instrumentation/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Java 5发布有一段时间了，Instrumentation这个feature是Java 5新提供的。其方式是通过修改字节码的方式使得Java开发人员能够操作类。官方文档说主要是给工具提供修改应用的状态、行为使用的:)<br>先来个简单的例子看看到底什么是Instrumen]]>
    </summary>
    
      <category term="技术" scheme="http://navigating.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2006年年终总结(原名：一篇没有写完的BLOG)]]></title>
    <link href="http://navigating.github.io/2007/2006%E5%B9%B4%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93-%E5%8E%9F%E5%90%8D%EF%BC%9A%E4%B8%80%E7%AF%87%E6%B2%A1%E6%9C%89%E5%86%99%E5%AE%8C%E7%9A%84BLOG/"/>
    <id>http://navigating.github.io/2007/2006年年终总结-原名：一篇没有写完的BLOG/</id>
    <published>2007-03-13T03:29:17.000Z</published>
    <updated>2015-08-01T03:29:46.155Z</updated>
    <content type="html"><![CDATA[<p>2006已经过去，2007已经开始。<br>过去的一年，有高兴，有激动，有不少难以忘记的时刻，有很多痛苦的思考。当我面对和回首自己过去的一年，我不知道自己除了时间之外究竟还失去了什么，自己除了痛苦之外还有多少收获？<br>人是可以活的洒脱些，就看一个人究竟要的是什么？就看你付出了多少？<br>要行动，要思考，要计划，要不断的沟通。<br>技术的狂热，当我在Miami Java User Group第一次聚会上看到Michael Feather的依然这么执着，依然的狂热，对于C++,对于functional programming，一个普通的程序员的极限就是这样吗。</p>
<p>一个Senior Programmer</p>
<p>首先是一个人，要做一个什么样子的人？<br>“观身如身，观心如心。”<br>如果是一个人，一个人的架构一定要比程序员的架构高。我们要一个什么样的身，基本的是健康的，就要经常锻炼了；中国一向有一个修身的传统，可见修身包括很多，怎么去修身，社会有社会的价值，个人有个人的志向。修身对谁都是一个既迷茫又痛苦的话题，“求仁得仁”，回到一个很糟乱的话题了，一个人到底想要得是什么？为了想要的得到底付出了什么？包括痛苦，包括性命，“求仁得仁”这个成语本身，伯夷、叔齐并没有欢天喜地的结局，相反，太执著，太倔强，为了得到可以牺牲了权利，身份，温饱，生命。一个人想来想去，问来问去，问的都是自己，都是自己的心。屈原先生应当是这方面的最有权威的专家了。能研究做学问的学问—哲学的人智商肯定不能低，“观身如身，观心如心。”这句话理解起来费力；还说了“观身观心”，痛苦的时候观自己的心；走投无路的时候寻找去观他人的心。<br>如果人一生有幸福和痛苦的话，那痛苦和幸福一定有一个起点，那是不是凡事都有起点。如果一生有起点的话，这个起点在哪儿？一个人能不能自己选择起点？<br>技术，技术是什么？什么是技术？如果技术是一个世界，技术之外呢？技术之外的世界呢？<br>人类也不知道生命出现之前的状态，一个人是不知道前世的；也无法将来到这个世界的最初的感觉的存储在自己的大脑的。那么一个人还是能想象死亡的。<br>一个人最痛苦的是什么，失去生命吗？如果说失去生命是最痛苦的，那是为什么呢，有人体验过吗？肯定没有。为什么人要惧怕死亡呢，因为要失去一些东西吗还是人的状态要发生了转变还是人类无法预知死亡之后的东西？如果是这样，恐惧的是失去，恐惧的是巨变，恐惧的是未知。如果一个人要恐惧失去，就应该恐惧死亡；如果一个人恐惧巨变，就应该恐惧死亡；如果一个人恐惧未知，就应该恐惧死亡。同样，一个人恐惧死亡，肯定会恐惧失去，恐惧巨变，恐惧未知。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2006已经过去，2007已经开始。<br>过去的一年，有高兴，有激动，有不少难以忘记的时刻，有很多痛苦的思考。当我面对和回首自己过去的一年，我不知道自己除了时间之外究竟还失去了什么，自己除了痛苦之外还有多少收获？<br>人是可以活的洒脱些，就看一个人究竟要的是什么？就看你]]>
    </summary>
    
      <category term="生活" scheme="http://navigating.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开聊有益]]></title>
    <link href="http://navigating.github.io/2007/%E5%BC%80%E8%81%8A%E6%9C%89%E7%9B%8A/"/>
    <id>http://navigating.github.io/2007/开聊有益/</id>
    <published>2007-03-13T03:27:30.000Z</published>
    <updated>2015-08-01T03:28:00.083Z</updated>
    <content type="html"><![CDATA[<p>偶尔看一下中央二套的两会节目，竟然在讨论青少年上网的社会/教育问题。<br>抨击我国现状教育的不在少数，学校教育大体上就是一种“推”的教育方式，是一种社会培养人才的最重要的体系，是对未来人才的储备机制，正如宣传所说青少年就是花儿的年华。人生只有一次，家长，社会的期望终归是一种期望，孩子有孩子的乐趣，孩子的年华，孩子的思想。<br>就针对个人而言，回想数十年“寒窗读书”有意思的好像真没多少，或许是背了些英语单词，记了些简单的英语句子；还有就是几篇语文的文章名字或者几个名句；还有几个数理化的专业术语。如果说是从业研究方向，可能还正能捡起些东西来。一般人对于孩子教育不外乎认为培养兴趣，培养性格等几个方面，当我们进入社会，发现做人本身就不是件容易的事情，何况培养人，培养人才。<br>一提到问题/隐患，很多人不约而同的想到改革这个话题，我有个朋友谈到，教育抓得是人的未来，医疗抓得人的命，谁都无法逃脱其中，改革这两项何其难啊。这真是一阵见血的评论。<br>培养性格是很重要的一方面，培养什么样的人才至少需要前瞻性的眼界了解社会的人才需求方向，所以做大师就不是那么简单的事情了。<br>一个人走出校门的同时进入社会，肯定能强烈感觉到社会需要什么样的人才的，很多时候就是社会在“拉”了，在这个过程中人类表现了异常聪明的一面，总是在做自我培养，提高自身。中国哲学的本身很大成分上都是和自己斗争的过程，大体上是自我培养的哲学体系，可见中国人对于社会还是异常重视尊重的。学校教育带来的很大的弊端就是自闭，一不小心就走入了以自我为中心的圈子；同时容易让人抑郁。估计很多人在人生的某些阶段都会有抑郁，自闭的问题；要提高自我必须要认清出这个问题，解决这个问题。<br>中国人大体上不怎么提倡Open这种方式，我们在社会中愈来愈发现Open的重要性，所以更多人都宁愿自己是一个心理，眼睛，思维都很Open的人。<br>我自身已近从事软件开发三年多，如果让我回首认为该毕业的时候如何策划培养自己，除了性格之外有三点：<br>1。沟通能力，做好任何一件事情，寻找任何一个机会，每一次自我的提高，都是从沟通开始的。世界变得越来越平，沟通的空间时间也在增长。<br>2。语言(掌控)能力，能够多掌握一门语言，相当于给自己多了一个世界，机会，眼界，空间。。。。。。<br>3。技术能力，这是一个从事软件开发人员的立身基础，也是对于行业知识的积累。<br>世界如此美丽，希望每一个人都要好好的珍惜。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>偶尔看一下中央二套的两会节目，竟然在讨论青少年上网的社会/教育问题。<br>抨击我国现状教育的不在少数，学校教育大体上就是一种“推”的教育方式，是一种社会培养人才的最重要的体系，是对未来人才的储备机制，正如宣传所说青少年就是花儿的年华。人生只有一次，家长，社会的期望终归是一]]>
    </summary>
    
      <category term="生活" scheme="http://navigating.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>